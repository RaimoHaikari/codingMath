[{"C:\\Users\\raimo\\Documents\\math\\src\\index.js":"1","C:\\Users\\raimo\\Documents\\math\\src\\reportWebVitals.js":"2","C:\\Users\\raimo\\Documents\\math\\src\\App.js":"3","C:\\Users\\raimo\\Documents\\math\\src\\components\\trigonometry\\index.js":"4","C:\\Users\\raimo\\Documents\\math\\src\\components\\trigonometry\\trig.js":"5","C:\\Users\\raimo\\Documents\\math\\src\\store.js":"6","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\trigReducer.js":"7","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\bouncingReducer.js":"8","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\timerReducer.js":"9","C:\\Users\\raimo\\Documents\\math\\src\\layout\\flies\\index.js":"10","C:\\Users\\raimo\\Documents\\math\\src\\components\\lissajousCurve\\index.js":"11","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\lissajousReducer.js":"12","C:\\Users\\raimo\\Documents\\math\\src\\components\\lissajousCurve\\lissajous.js":"13","C:\\Users\\raimo\\Documents\\math\\src\\layout\\rotatingArrow\\index.js":"14","C:\\Users\\raimo\\Documents\\math\\src\\components\\arctangent\\index.js":"15","C:\\Users\\raimo\\Documents\\math\\src\\components\\arctangent\\arctanget.js":"16","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\rotatingArrowReducer.js":"17","C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\index.js":"18","C:\\Users\\raimo\\Documents\\math\\src\\components\\frontPage\\header.js":"19","C:\\Users\\raimo\\Documents\\math\\src\\components\\frontPage\\featured.js":"20","C:\\Users\\raimo\\Documents\\math\\src\\components\\frontPage\\products.js":"21","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\vectorReducer.js":"22","C:\\Users\\raimo\\Documents\\math\\src\\layout\\vector\\index.js":"23","C:\\Users\\raimo\\Documents\\math\\src\\services\\vector.js":"24","C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\index.js":"25","C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\physics.js":"26","C:\\Users\\raimo\\Documents\\math\\src\\layout\\advancedAcceleration\\index.js":"27","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\index.js":"28","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\advAccelerationReducer.js":"29","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\d3Acceleration.js":"30","C:\\Users\\raimo\\Documents\\math\\src\\hooks\\useEventListener.js":"31","C:\\Users\\raimo\\Documents\\math\\src\\layout\\tyomaa\\index.js":"32","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\Hupu.js":"33","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\IlotulitusRaketti.js":"34","C:\\Users\\raimo\\Documents\\math\\src\\layout\\planeetat\\index.js":"35","C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\index.js":"36","C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\D3Gravity.js":"37","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\gravitationReducer.js":"38","C:\\Users\\raimo\\Documents\\math\\src\\components\\navbar\\index.js":"39","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\navigationReducer.js":"40","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\toolbar.js":"41","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\debugControls.js":"42","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\meterPanel.js":"43","C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\gauge\\index.js":"44","C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\gauge\\d3Compass.js":"45","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\compass.js":"46","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\settingsPanel.js":"47","C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\slider\\index.js":"48","C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\slider\\d3Slider.js":"49","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\slider\\index.js":"50","C:\\Users\\raimo\\Documents\\math\\src\\hooks\\useKonamiCode.js":"51","C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\toolbar.js":"52","C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\settingsPanel.js":"53","C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\meterPanel.js":"54","C:\\Users\\raimo\\Documents\\math\\src\\components\\toolbarHolder\\index.js":"55","C:\\Users\\raimo\\Documents\\math\\src\\components\\toolbarHolder\\toolbarGroub.js":"56","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\NumberInput\\index.js":"57","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\NumberInput\\inputElements.js":"58","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Toggle\\index.js":"59","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Toggle\\inputElements.js":"60","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\RadioGroup\\index.js":"61","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\RadioGroup\\inputElements.js":"62","C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\debugControls.js":"63","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Icons\\index.js":"64","C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\toolbar.js":"65","C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\DegubControls.js":"66","C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\settings.js":"67","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Tabs\\index.js":"68","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Tabs\\elements.js":"69","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Tabs\\tab.js":"70","C:\\Users\\raimo\\Documents\\math\\src\\components\\svgElements\\caleuche.js":"71","C:\\Users\\raimo\\Documents\\math\\src\\components\\svgElements\\saffar.js":"72","C:\\Users\\raimo\\Documents\\math\\src\\components\\svgElements\\spe.js":"73","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\Cloud.js":"74","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\Icon.js":"75","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\FunFun.js":"76","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\Planets.js":"77","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\NoFun.js":"78","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\SunFun.js":"79","C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\index.js":"80","C:\\Users\\raimo\\Documents\\math\\src\\layout\\bouncing\\index.js":"81","C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\toolbar.js":"82","C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\controls.js":"83","C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\settings.js":"84","C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\D3Bouncing.js":"85","C:\\Users\\raimo\\Documents\\math\\src\\components\\navbar\\responsiveNavBar.js":"86","C:\\Users\\raimo\\Documents\\math\\src\\components\\navbar\\elements.js":"87","C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\SvgIcon.js":"88","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\fractalReducer.js":"89","C:\\Users\\raimo\\Documents\\math\\src\\layout\\fractal\\index.js":"90","C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\index.js":"91","C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\toolbar.js":"92","C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\d3Fractal.js":"93","C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\meterPanel.js":"94","C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\settings.js":"95","C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\Hero.js":"96","C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\recursion\\index.js":"97","C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\recursion\\d3component.js":"98","C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\Front.js":"99","C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\Testi.js":"100","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\index.js":"101","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\d3Flocking.js":"102","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\flockingReducer.js":"103","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\Vector.js":"104","C:\\Users\\raimo\\Documents\\math\\src\\layout\\flocking\\index.js":"105","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\toolbar.js":"106","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\settings.js":"107","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\controls.js":"108"},{"size":392,"mtime":1618578288981,"results":"109","hashOfConfig":"110"},{"size":362,"mtime":499162500000,"results":"111","hashOfConfig":"110"},{"size":1772,"mtime":1627219561528,"results":"112","hashOfConfig":"110"},{"size":1295,"mtime":1609186146212,"results":"113","hashOfConfig":"110"},{"size":2533,"mtime":1609270575250,"results":"114","hashOfConfig":"110"},{"size":1488,"mtime":1626721831793,"results":"115","hashOfConfig":"110"},{"size":253,"mtime":1609186548631,"results":"116","hashOfConfig":"110"},{"size":6385,"mtime":1616700771981,"results":"117","hashOfConfig":"110"},{"size":637,"mtime":1609358616507,"results":"118","hashOfConfig":"110"},{"size":308,"mtime":1609595376974,"results":"119","hashOfConfig":"110"},{"size":1620,"mtime":1609701326384,"results":"120","hashOfConfig":"110"},{"size":5380,"mtime":1609705338385,"results":"121","hashOfConfig":"110"},{"size":2152,"mtime":1609618057325,"results":"122","hashOfConfig":"110"},{"size":232,"mtime":1609856659102,"results":"123","hashOfConfig":"110"},{"size":1995,"mtime":1609942913753,"results":"124","hashOfConfig":"110"},{"size":2786,"mtime":1610889753728,"results":"125","hashOfConfig":"110"},{"size":509,"mtime":1609876775558,"results":"126","hashOfConfig":"110"},{"size":565,"mtime":1623600862693,"results":"127","hashOfConfig":"110"},{"size":614,"mtime":1610201886468,"results":"128","hashOfConfig":"110"},{"size":1471,"mtime":1611344271921,"results":"129","hashOfConfig":"110"},{"size":1604,"mtime":1611343335429,"results":"130","hashOfConfig":"110"},{"size":11383,"mtime":1616618255496,"results":"131","hashOfConfig":"110"},{"size":909,"mtime":1614083935012,"results":"132","hashOfConfig":"110"},{"size":13298,"mtime":1616618281970,"results":"133","hashOfConfig":"110"},{"size":2751,"mtime":1614111535976,"results":"134","hashOfConfig":"110"},{"size":5354,"mtime":1613764034421,"results":"135","hashOfConfig":"110"},{"size":1008,"mtime":1613054360204,"results":"136","hashOfConfig":"110"},{"size":4044,"mtime":1612383409049,"results":"137","hashOfConfig":"110"},{"size":8717,"mtime":1612642579883,"results":"138","hashOfConfig":"110"},{"size":5135,"mtime":1612383376755,"results":"139","hashOfConfig":"110"},{"size":1043,"mtime":1610654695128,"results":"140","hashOfConfig":"110"},{"size":1387,"mtime":1627219857708,"results":"141","hashOfConfig":"110"},{"size":486,"mtime":1611344105063,"results":"142","hashOfConfig":"110"},{"size":4069,"mtime":1611344105063,"results":"143","hashOfConfig":"110"},{"size":923,"mtime":1616675977526,"results":"144","hashOfConfig":"110"},{"size":2172,"mtime":1615317266232,"results":"145","hashOfConfig":"110"},{"size":4037,"mtime":1615576652452,"results":"146","hashOfConfig":"110"},{"size":7288,"mtime":1615577954612,"results":"147","hashOfConfig":"110"},{"size":2160,"mtime":1616765068498,"results":"148","hashOfConfig":"110"},{"size":3748,"mtime":1627219507362,"results":"149","hashOfConfig":"110"},{"size":1129,"mtime":1613072696981,"results":"150","hashOfConfig":"110"},{"size":2940,"mtime":1611927534276,"results":"151","hashOfConfig":"110"},{"size":500,"mtime":1612123331569,"results":"152","hashOfConfig":"110"},{"size":1654,"mtime":1612122796490,"results":"153","hashOfConfig":"110"},{"size":5665,"mtime":1612124932936,"results":"154","hashOfConfig":"110"},{"size":1444,"mtime":1612124996674,"results":"155","hashOfConfig":"110"},{"size":1111,"mtime":1612642400288,"results":"156","hashOfConfig":"110"},{"size":1280,"mtime":1612644179687,"results":"157","hashOfConfig":"110"},{"size":2693,"mtime":1612644668404,"results":"158","hashOfConfig":"110"},{"size":2488,"mtime":1613593721855,"results":"159","hashOfConfig":"110"},{"size":1348,"mtime":1612963914219,"results":"160","hashOfConfig":"110"},{"size":1119,"mtime":1614023594762,"results":"161","hashOfConfig":"110"},{"size":4391,"mtime":1615295238084,"results":"162","hashOfConfig":"110"},{"size":661,"mtime":1613074069348,"results":"163","hashOfConfig":"110"},{"size":448,"mtime":1613054075752,"results":"164","hashOfConfig":"110"},{"size":804,"mtime":1613072096431,"results":"165","hashOfConfig":"110"},{"size":1420,"mtime":1613763577269,"results":"166","hashOfConfig":"110"},{"size":1490,"mtime":1613917255939,"results":"167","hashOfConfig":"110"},{"size":542,"mtime":1615386054105,"results":"168","hashOfConfig":"110"},{"size":892,"mtime":1613827394249,"results":"169","hashOfConfig":"110"},{"size":2795,"mtime":1614021957958,"results":"170","hashOfConfig":"110"},{"size":2144,"mtime":1614023173534,"results":"171","hashOfConfig":"110"},{"size":1114,"mtime":1614111535976,"results":"172","hashOfConfig":"110"},{"size":2881,"mtime":1615495184719,"results":"173","hashOfConfig":"110"},{"size":814,"mtime":1615293926083,"results":"174","hashOfConfig":"110"},{"size":983,"mtime":1615226523293,"results":"175","hashOfConfig":"110"},{"size":300,"mtime":1615572785576,"results":"176","hashOfConfig":"110"},{"size":4404,"mtime":1615577134012,"results":"177","hashOfConfig":"110"},{"size":878,"mtime":1615554882260,"results":"178","hashOfConfig":"110"},{"size":652,"mtime":1615555021452,"results":"179","hashOfConfig":"110"},{"size":303,"mtime":1615472401334,"results":"180","hashOfConfig":"110"},{"size":299,"mtime":1615472471527,"results":"181","hashOfConfig":"110"},{"size":293,"mtime":1615486239178,"results":"182","hashOfConfig":"110"},{"size":1454,"mtime":1615490345756,"results":"183","hashOfConfig":"110"},{"size":478,"mtime":1615490632527,"results":"184","hashOfConfig":"110"},{"size":1587,"mtime":1615491905729,"results":"185","hashOfConfig":"110"},{"size":4558,"mtime":1615572761454,"results":"186","hashOfConfig":"110"},{"size":2205,"mtime":1615494066566,"results":"187","hashOfConfig":"110"},{"size":937,"mtime":1615572731412,"results":"188","hashOfConfig":"110"},{"size":1321,"mtime":1616700547679,"results":"189","hashOfConfig":"110"},{"size":1143,"mtime":1616677941446,"results":"190","hashOfConfig":"110"},{"size":776,"mtime":1616681946288,"results":"191","hashOfConfig":"110"},{"size":1423,"mtime":1616679017827,"results":"192","hashOfConfig":"110"},{"size":1234,"mtime":1616683569554,"results":"193","hashOfConfig":"110"},{"size":2883,"mtime":1616702216377,"results":"194","hashOfConfig":"110"},{"size":1373,"mtime":1616786468212,"results":"195","hashOfConfig":"110"},{"size":1921,"mtime":1616785826254,"results":"196","hashOfConfig":"110"},{"size":608,"mtime":1620847281557,"results":"197","hashOfConfig":"110"},{"size":18800,"mtime":1623264754110,"results":"198","hashOfConfig":"110"},{"size":861,"mtime":1618751461070,"results":"199","hashOfConfig":"110"},{"size":1539,"mtime":1623264771313,"results":"200","hashOfConfig":"110"},{"size":1094,"mtime":1618943402611,"results":"201","hashOfConfig":"110"},{"size":3999,"mtime":1623266473696,"results":"202","hashOfConfig":"110"},{"size":534,"mtime":1618749793035,"results":"203","hashOfConfig":"110"},{"size":5819,"mtime":1623180844005,"results":"204","hashOfConfig":"110"},{"size":8942,"mtime":1623351435103,"results":"205","hashOfConfig":"110"},{"size":4094,"mtime":1623610916952,"results":"206","hashOfConfig":"110"},{"size":3315,"mtime":1623506291645,"results":"207","hashOfConfig":"110"},{"size":8939,"mtime":1623350223015,"results":"208","hashOfConfig":"110"},{"size":531,"mtime":1623351236083,"results":"209","hashOfConfig":"110"},{"size":2820,"mtime":1627412762711,"results":"210","hashOfConfig":"110"},{"size":7614,"mtime":1627671091335,"results":"211","hashOfConfig":"110"},{"size":12300,"mtime":1627824898044,"results":"212","hashOfConfig":"110"},{"size":6731,"mtime":1627670717660,"results":"213","hashOfConfig":"110"},{"size":902,"mtime":1627220579342,"results":"214","hashOfConfig":"110"},{"size":812,"mtime":1627220557620,"results":"215","hashOfConfig":"110"},{"size":1310,"mtime":1627669326712,"results":"216","hashOfConfig":"110"},{"size":161,"mtime":1627220326637,"results":"217","hashOfConfig":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},"1wlagv8",{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"220"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"229"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"220"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"220"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"220"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"220"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"220"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"220"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"220"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"268"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"268"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"220"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"220"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"220"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"220"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"220"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"220"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"220"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"220"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"220"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"220"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"220"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"333"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"220"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"220"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"220"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"346"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"346"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"346"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"220"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"220"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"220"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"397"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"397"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"220"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"220"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"220"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"220"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"268"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"220"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"220"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"220"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"220"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"220"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"220"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"220"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"220"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"220"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},"C:\\Users\\raimo\\Documents\\math\\src\\index.js",[],["485","486"],"C:\\Users\\raimo\\Documents\\math\\src\\reportWebVitals.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\App.js",["487","488"],"import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n/*\nimport Trigonometry from './components/trigonometry'\nimport Timer from './components/timer';\nimport LissajousCurve from './layout/flies';\nimport RotatingArrow from \"./layout/rotatingArrow\";\nimport LandingPage from \"./layout/landingPage\";\n*/\n\n//import Navbar from \"./components/navbar\"\nimport ResponsiveNavBar from \"./components/navbar/responsiveNavBar\"\n\n\nimport AdvancedAcceleration from \"./layout/advancedAcceleration\";\nimport Bouncing from \"./layout/bouncing\";\nimport Flocking from './layout/flocking';\nimport Fractal from \"./layout/fractal\"\nimport Gravity from \"./layout/planeetat\";\nimport LissajousCurve from './layout/flies';\nimport LandingPage from \"./layout/landingPage\";\nimport Vectors from \"./layout/vector\";\nimport TestArea from \"./layout/tyomaa\"\nimport RotatingArrow from \"./layout/rotatingArrow\"\n\nconst App = () => {\n\n\n\n  /*     \n   *\n   */\n  return (\n    <Router>\n\n      <ResponsiveNavBar />\n    \n      <Switch>\n        <Route path=\"/flies\">\n          <LissajousCurve />\n        </Route>\n        <Route path=\"/vector\">\n          <Vectors />\n        </Route>\n        <Route path=\"/acceleration\">\n          <AdvancedAcceleration />\n        </Route>\n        <Route path=\"/fractal\">\n          <Fractal />\n        </Route>\n        <Route path=\"/flocking\">\n          <Flocking />\n        </Route>\n        <Route path=\"/gravity\">\n          <Gravity />\n        </Route>\n        <Route path=\"/bouncing\">\n          <Bouncing />\n        </Route>\n        <Route path=\"/testi\">\n          <TestArea />\n        </Route>      \n        <Route path=\"/\">\n          <LandingPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n\n};\n\nexport default App;","C:\\Users\\raimo\\Documents\\math\\src\\components\\trigonometry\\index.js",["489","490","491","492"],"import React, {useEffect, useRef, useState} from 'react';\r\n\r\nimport {interpolateCividis, select} from \"d3\";\r\n\r\nimport './trigonometry.css';\r\n\r\nimport {sinWave} from \"./trig\";\r\n\r\nlet vis = null;\r\n\r\n/*\r\n * \r\n */\r\nconst Trigonometry = () => {\r\n\r\n    const[data, setData] = useState(null)\r\n\r\n    const[height, setHeight] = useState(500)\r\n    const[width, setWidth] = useState(500)\r\n\r\n    const refElement = useRef(null)\r\n\r\n    const getData = () => {\r\n\r\n        let angles = []\r\n\r\n        for(var angle = 0; angle < Math.PI * 2;  angle += 0.05){\r\n            angles.push(angle)\r\n        }\r\n        \r\n        return angles\r\n    }\r\n\r\n    const initVis = () => {\r\n\r\n        vis = sinWave()\r\n            .data(data)\r\n            .height(height)\r\n            .width(width)\r\n\r\n        select(refElement.current)\r\n            .call(vis)\r\n    }\r\n\r\n    const updateVis = () => {}\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(data === null){\r\n            setData(getData())\r\n        }\r\n            \r\n\r\n        if(data && data.length){\r\n\r\n            if(vis === null)\r\n                initVis()\r\n            else\r\n                updateVis()\r\n        }\r\n\r\n    }, [data])\r\n\r\n    return (\r\n        <div ref={refElement} className=\"trig-container\">\r\n        </div>\t       \r\n    );\r\n}\r\n\r\nexport default Trigonometry;",["493","494"],"C:\\Users\\raimo\\Documents\\math\\src\\components\\trigonometry\\trig.js",["495","496","497","498","499"],"import * as d3 from \"d3\";\r\nimport { \r\n    select, \r\n    min,\r\n    max, \r\n    extent,\r\n    scaleLinear \r\n} from \"d3\";\r\n\r\nexport const sinWave = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let xScale;\r\n    let yScale;\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n\r\n\r\n        */\r\n        selection.each(function(){\r\n\r\n            console.log(d3.extent(data.map(d => Math.sin(d))))\r\n\r\n            xScale = d3.scaleLinear()\r\n                .domain(d3.extent(data))                   // unit: phenomeon\r\n                .range([margin.left, (width-margin.left)]) // unit: pixels\r\n\r\n\r\n            yScale = d3.scaleLinear()\r\n                .domain(d3.extent(data.map(d => Math.sin(d))))  // unit: phenomeon\r\n                .range([margin.top, (height-margin.bottom)])    // unit: pixels\r\n\r\n            svg = d3\r\n                .select(this)\r\n                .append('svg')\r\n                .attr(\"viewBox\", [0,0, width, height])\r\n\r\n            gElem = svg\r\n                .append(\"g\")\r\n                .attr('transform', `scale(1, -1) translate(${0},${-height})`)\r\n                //.attr('transform', `translate(${0},${height/2})`)\r\n                // scale(1, -1)\r\n\r\n            gElem\r\n                .selectAll(\"circle\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"circle\")\r\n                    .style(\"fill\", \"black\")\r\n                    .attr(\"r\", 1)\r\n                    .attr(\"cx\", d => xScale(d))\r\n                    .attr(\"cy\", d => yScale(Math.sin(d)))\r\n\r\n            updateData = function() {}\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updataWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\store.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\reducers\\trigReducer.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\reducers\\bouncingReducer.js",["500"],"import {Bouncer} from \"../services/vector\";\r\n\r\n/*\r\n * Get a random number between 0.0200 and 0.120 \r\n * - https://stackoverflow.com/questions/17726753/get-a-random-number-between-0-0200-and-0-120-float-numbers\r\n */\r\nfunction generateRandomNumber() {\r\n    var min = 0.0,\r\n        max = 2.0,\r\n        highlightedNumber = Math.random() * (max - min) + min;\r\n\r\n    return highlightedNumber;\r\n};\r\n\r\nconst ANIMATION = {\r\n    SPRING : {\r\n        name: \"Up'n Down\",\r\n        value: 'spring', \r\n        description: \"Ball bouncing up and down\",\r\n        angle: 0,\r\n        speed: 0.1,\r\n        offset: 500 * 0.4,\r\n        newState: function(state){\r\n            return bounceVertical(state);\r\n        },\r\n        color: \"navy\"\r\n    }, \r\n    BOUNCING: {\r\n        name: 'Bouncing off the walls',\r\n        value: 'bouncer', \r\n        description: \"Ball bouncing off the walls\",\r\n        angle: Math.PI * generateRandomNumber(),\r\n        speed: 50,\r\n        offset: null,\r\n        newState: function(state){\r\n            return bounce(state);\r\n        },\r\n        color: \"red\"\r\n    }, \r\n};\r\n\r\n// Starting Position\r\nconst X = 0\r\nconst Y = 0\r\n\r\n// Dimension of the Canvas\r\nconst HEIGHT = 500\r\nconst WIDTH = 500\r\n\r\n\r\nconst getInitialAnimationType = () => ANIMATION.SPRING\r\n\r\n\r\nconst getData = (aType, x, y, width, height) => {\r\n\r\n    let name = aType.description;\r\n\r\n    return new Bouncer(\r\n        x, \r\n        y, \r\n        aType.speed, \r\n        aType.angle, \r\n        width, \r\n        height, \r\n        aType.color, \r\n        aType.offset\r\n    );\r\n\r\n}\r\n\r\n/*\r\n * Alustetaan aineisto \r\n */\r\n\r\nconst initialState = {\r\n    animation: getInitialAnimationType(),\r\n    animationTypes: ANIMATION,\r\n    isActive: false,\r\n    height: HEIGHT,\r\n    width: WIDTH,\r\n    datum: getData(getInitialAnimationType(),X,Y,WIDTH,HEIGHT),\r\n    x: X,\r\n    y: Y,\r\n}\r\n\r\n/*\r\n * R E A C T I O N   T O W A R D S   A C T I O N S\r\n */\r\n\r\n/*\r\n * E D G E   D E T E C T I O N\r\n */\r\n\r\n/*\r\n * Seinistä kimmokkeen ottava pallo\r\n */\r\nconst bounce = (state) => state.datum.accelerate()\r\n\r\n/*\r\n * Pallon liikuttaminen ylös .... alas\r\n */\r\nconst bounceVertical = (state) => state.datum.doTheBounce()\r\n\r\n\r\n/*\r\n * Lasketaan partikkelien uudet sijaintipaikat\r\n */\r\nconst calculateNewState = (state) => {\r\n\r\n    let newData = getNewState(state.animation, state);\r\n\r\n    return {\r\n        ...state,\r\n        datum: newData\r\n    }\r\n}\r\n\r\n/*\r\n * Asetetaan esitettävän animaation tyyppi\r\n * - vaihtoehtoina ovat Firework ja Fountain\r\n */\r\nconst changeAnimationType = (state, data) => {\r\n\r\n    const {x,y,width, height} = state;\r\n\r\n    const newActive = Object.entries(state.animationTypes)\r\n        .filter(([key, value]) => {\r\n            return  value.value === data.type;\r\n        })[0][1];\r\n\r\n\r\n    let newData = getData(newActive,x,y,width, height);\r\n    \r\n    return {\r\n        ...state,\r\n        animation: newActive,\r\n        datum: newData\r\n    }\r\n}\r\n\r\n /*\r\n  * Partikkelien uuden sijaintipaikan laskeminen\r\n  *\r\n  * Välitetään tehtävä käytössä olevan animaatiotyypin mukaiselle funktiolle: \r\n  * - deLaFontaine mikäli suihkulähde\r\n  * - fireWorks mikäli ilotulitus\r\n  */\r\n const getNewState = (aType, state) => aType.newState(state);\r\n\r\n\r\n/*\r\n * A C T I O N S\r\n */\r\nexport const animate = () => {\r\n\r\n    return (dispatch, state) => {\r\n\r\n        let intervalId;\r\n\r\n        /*\r\n         * Voidaanko animaatio käynnistää?\r\n         * - ei liity ajastimeen, vaan siihen onko käyttäjä käynnistänyt toiminnon\r\n         * - toggleActiveState toimii kytkimenä\r\n         */\r\n        let isActive = state().bouncing.isActive;\r\n\r\n        // - onko jo juoksemassa\r\n        let timerRunning = state().timer.running;\r\n        let timerId = state().timer.id;\r\n        \r\n        if(timerRunning) {\r\n            clearInterval(timerId);\r\n            dispatch({type: 'TIMER_CLEAR'});\r\n        } \r\n\r\n        if(isActive){\r\n\r\n            intervalId = setInterval(() => {\r\n\r\n                dispatch({\r\n                    type: 'BOUNCER_UPDATE_POSTION',\r\n                    data: {}\r\n                })\r\n    \r\n            }, 100)\r\n\r\n                    // kirjataan timerin käynnistys muistiin\r\n            dispatch({\r\n                type: 'TIMER_START',\r\n                data: {\r\n                    id: intervalId\r\n                }\r\n            })\r\n\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Tarviiko erikeseen ???? \r\n */\r\nexport const stopAnimation = () => {\r\n\r\n    return (dispatch,state) => {\r\n\r\n        // - onko jo juoksemassa\r\n        let timerRunning = state().timer.running;\r\n        let timerId = state().timer.id;\r\n        \r\n        if(timerRunning) {\r\n            clearInterval(timerId);\r\n            dispatch({type: 'TIMER_CLEAR'});\r\n        } \r\n\r\n        dispatch({\r\n            type: 'RESET_BOUNCER',\r\n            data: {}\r\n        })\r\n    }    \r\n\r\n}\r\n\r\n/*\r\n * Kytketään animaation käynnistävä muuttuja joko päälle tai pois päältä\r\n * - muuttuja: isActive\r\n */\r\nexport const toggleActiveState = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'TOGGLE_ACTIVE',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Liikuttaan palloa valitun animaation tyypin mukaisesti yhden askeleen eteenpäin\r\n */\r\nexport const oneStepForward = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'BOUNCER_UPDATE_POSTION',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Kytketään animaation käynnistävä muuttuja joko päälle tai pois päältä\r\n * - muuttuja: isActive\r\n */\r\nexport const setAnimationType = (val) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'BOUNCER_SET_ANIMATION_TYPE',\r\n            data: {\r\n                type: val\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n/*\r\n *             \r\n */\r\nconst bouncingReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case \"RESET_BOUNCER\":\r\n\r\n            return initialState\r\n\r\n        case 'TOGGLE_ACTIVE':\r\n\r\n            const newState = !state.isActive\r\n\r\n            return {\r\n                ...state,\r\n                isActive: newState\r\n            }\r\n\r\n        case 'BOUNCER_SET_ANIMATION_TYPE':\r\n            return changeAnimationType(state, action.data);\r\n\r\n        case 'BOUNCER_UPDATE_POSTION':\r\n            return calculateNewState(state)\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default bouncingReducer;\r\n\r\n","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\timerReducer.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\layout\\flies\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\lissajousCurve\\index.js",["501","502"],"import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {select} from \"d3\";\r\n\r\nimport {lissajous} from './lissajous'\r\nimport {animate, liikuta, toggleActiveState} from \"../../reducers/lissajousReducer\";\r\n\r\nlet vis = null;\r\n\r\n\r\n/*\r\n * https://dev.to/emmaadesile/build-a-timer-using-react-hooks-3he2\r\n */\r\nconst LissajousCurve = () => {\r\n\r\n\r\n    const refElement = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const {data, height, isActive, width} = useSelector(state => {\r\n\r\n        return {\r\n            ...state.lissajous\r\n        }\r\n    })\r\n\r\n    const initVis = () => {\r\n\r\n        vis = lissajous()\r\n            .data(data)\r\n            .height(height)\r\n            .width(width)\r\n\r\n        select(refElement.current)\r\n            .call(vis)\r\n            \r\n    }\r\n\r\n    const updateVis = () => {\r\n\r\n        vis\r\n            .data(data)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n            \r\n        if(data && data.length){\r\n\r\n            if(vis === null)\r\n                initVis()\r\n            else\r\n                updateVis()\r\n        }\r\n\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(animate())\r\n\r\n    }, [isActive])\r\n\r\n\r\n    return (\r\n       <>\r\n         <div ref={refElement} className=\"trig-container\">\r\n        </div>\r\n        <button\r\n            onClick={() => dispatch(toggleActiveState())}\r\n        >{isActive?'Pysäytä':'Käynnistä'}</button>\t  \r\n        <button\r\n            onClick={() => dispatch(liikuta())}\r\n        >Liikuta</button>\r\n       </>      \r\n    );\r\n}\r\n\r\nexport default LissajousCurve;","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\lissajousReducer.js",["503","504","505","506","507","508"],"// Circles\r\nconst CIRCLERADIUS = 2\r\n\r\n// Canvas\r\nconst HEIGHT = 500\r\nconst WIDTH = 500\r\n\r\n// Animation\r\nconst X_ANGLE = 0\r\nconst Y_ANGLE = 0\r\nconst X_RADIUS = 225\r\nconst Y_RADIUS = 225\r\nconst X_SPEED = 0.1\r\nconst Y_SPEED = 0.1\r\n\r\n/*\r\n * Lähtötilanne\r\n */\r\nconst getInitialState = () => {\r\n\r\n    let data = []\r\n\r\n    for(var i = 0; i < 50; i++){\r\n\r\n\r\n        let xAngle = 2 * Math.random() * Math.PI\r\n        let yAngle = 2 * Math.random() * Math.PI\r\n\r\n        /*\r\n         *  -> 20\r\n         * Math.floor(Math.random() * 16) + 5;\r\n        */\r\n\r\n        let xRadius = Math.floor(Math.random() * 176) + 50;\r\n        let yRadius = Math.floor(Math.random() * 176) + 50;\r\n\r\n        /* \r\n         * https://stackoverflow.com/questions/17726753/get-a-random-number-between-0-0200-and-0-120-float-numbers\r\n         */\r\n        let xSpeed = (Math.random() * (0.01 - 0.9) + 0.9)\r\n        let ySpeed = (Math.random() * (0.01 - 0.9) + 0.9)\r\n\r\n        \r\n        let x = Math.cos(xAngle) * xRadius\r\n        let y = Math.sin(yAngle) * yRadius\r\n\r\n        data = data.concat({\r\n            x: x,\r\n            y: y,\r\n            radius: CIRCLERADIUS,\r\n            xAngle: xAngle + xSpeed,\r\n            xRadius: xRadius,\r\n            xSpeed: xSpeed,\r\n            yAngle: yAngle + xSpeed,\r\n            yRadius: yRadius,\r\n            ySpeed: ySpeed\r\n        })\r\n\r\n    }\r\n\r\n    return {\r\n        data: data,\r\n        height: HEIGHT,\r\n        isActive: false,\r\n        width: WIDTH\r\n    }\r\n\r\n}\r\n\r\n/*\r\n            x: x,\r\n            y: y,\r\n            radius: CIRCLERADIUS,\r\n            xAngle: xAngle + X_SPEED,\r\n            yAngle: yAngle + Y_SPEED\r\n*/\r\nconst calculateNewState = (state) => {\r\n\r\n    let data = state.data.map(d => {\r\n\r\n        let newX = Math.cos(d.xAngle) * d.xRadius\r\n        let newY = Math.sin(d.yAngle) * d.yRadius\r\n        let newXAngle = d.xAngle + d.xSpeed\r\n        let newYAngle = d.yAngle + d.ySpeed\r\n\r\n        return {\r\n            ...d,\r\n            x: newX,\r\n            y: newY,\r\n            xAngle: newXAngle,\r\n            yAngle: newYAngle\r\n        }\r\n    })\r\n\r\n    return {\r\n        ...state,\r\n        data: data\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * A C T I O N I T\r\n */\r\n\r\n/*\r\n * Animaation pyöritys\r\n * - alkuosa nollaa timerin, mikäli animaatio on ollut pyörimässä, pysäytetään se\r\n * - mikäli animaation halutaan käyvän (isActive === true), käynnistetään \r\n *   timeri, joka pyörittää seuraavan  aseman laskevaa tilapäivitystä\r\n * - mikäli action-kutsu tulee sen jälkeen, kun isActive -tila on vaihtunut\r\n *   suoritetaan vain alkuosa, eli pyörivän timerin sulkeminen...\r\n */\r\nexport const animate = () => {\r\n\r\n    return (dispatch, state) => {\r\n\r\n        /*\r\n         * Napataan ajastimen id talteen, jotta sille voidaan antaa pysäytyskäsky\r\n         */\r\n        let intervalId;\r\n\r\n        /*\r\n         * Voidaanko animaatio käynnistää?\r\n         * - ei liity ajastimeen, vaan siihen onko käyttäjä käynnistänyt toiminnon\r\n         */\r\n        let isActive = state().lissajous.isActive;\r\n\r\n        /*\r\n         * Onko ajastin päällä.\r\n         * - animaation sujuvuuden kannalta aikaisempi kierros pitää tarvittaessa keskeyttää?\r\n         */\r\n        let timerRunning = state().timer.running;\r\n        let timerId = state().timer.id;\r\n\r\n        if(timerRunning) {\r\n            clearInterval(timerId);\r\n            dispatch({type: 'TIMER_CLEAR'});\r\n        } \r\n\r\n        if(isActive){\r\n\r\n            intervalId = setInterval(() => {\r\n\r\n                dispatch({\r\n                    type: 'LISSAJOUS_ANIMATE',\r\n                    data: {}\r\n                })\r\n    \r\n            }, 100)\r\n\r\n                    // kirjataan timerin käynnistys muistiin\r\n            dispatch({\r\n                type: 'TIMER_START',\r\n                data: {\r\n                    id: intervalId\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const resetAnimation = () => {\r\n\r\n    return (dispatch,state) => {\r\n\r\n        // - onko jo juoksemassa\r\n        let timerRunning = state().timer.running;\r\n        let timerId = state().timer.id;\r\n        \r\n        if(timerRunning) {\r\n            clearInterval(timerId);\r\n            dispatch({type: 'TIMER_CLEAR'});\r\n        } \r\n\r\n        dispatch({\r\n            type: 'RESET_LISSAJOUS',\r\n            data: {}\r\n        })\r\n    }    \r\n\r\n}\r\n\r\n\r\n/*\r\n * Kytketään animaation käynnistävä muuttuja joko päälle tai pois päältä\r\n * - muuttuja: isActive\r\n */\r\nexport const toggleActiveState = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'LISSAJOUS_TOGGLE_ACTIVE',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\nexport const liikuta = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'LISSAJOUS_ANIMATE',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\n\r\n/*\r\n *             \r\n */\r\nconst lissajousReducer = (state = getInitialState(), action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case 'LISSAJOUS_ANIMATE':\r\n\r\n            return calculateNewState(state)\r\n\r\n        case 'LISSAJOUS_TOGGLE_ACTIVE':\r\n\r\n            const newState = !state.isActive\r\n\r\n            return {\r\n                ...state,\r\n                isActive: newState\r\n            }\r\n\r\n        case 'RESET_LISSAJOUS':\r\n\r\n            return getInitialState()\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default lissajousReducer;\r\n\r\n","C:\\Users\\raimo\\Documents\\math\\src\\components\\lissajousCurve\\lissajous.js",["509","510"],"import * as d3 from \"d3\";\r\nimport { \r\n    select\r\n} from \"d3\";\r\n\r\nexport const lissajous = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n    let circles;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            svg = d3\r\n                .select(this)\r\n                .append('svg')\r\n                .attr(\"viewBox\", [0,0, width, height])\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform', ` translate(${width/2},${height/2})`)\r\n\r\n            circles = gElem\r\n                .selectAll(\"circle\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"circle\")\r\n                    .style(\"stroke\", \"gray\")\r\n                    .style(\"fill\", \"black\")\r\n                    .attr(\"r\", d => d.radius)\r\n                    .attr(\"cx\", d => d.x)\r\n                    .attr(\"cy\", d => d.y)\r\n\r\n            updateData = function() {\r\n\r\n                circles\r\n                    .data(data)\r\n                    .attr(\"r\", d => d.radius)\r\n                    .attr(\"cx\", d => d.x)\r\n                    .attr(\"cy\", d => d.y)\r\n\r\n            }\r\n\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updataWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\layout\\rotatingArrow\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\arctangent\\index.js",["511","512"],"import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {select} from \"d3\";\r\n\r\n//import {setVis} from \"../../reducers/rotatingArrowReducer\";\r\n\r\n// - visualisoinnin toteuttava D3 komponentti\r\nimport {arctanget} from \"./arctanget\";\r\n\r\nconst Arctangent = () => {\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {data, height, width} = useSelector(state => state.rotatingArrow)\r\n\r\n    const initVis = () => {\r\n\r\n        visFunction.current = arctanget()\r\n            .data(data)\r\n            .height(height)\r\n            .width(width)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n    }\r\n\r\n    const updateVis = () => {\r\n        visFunction.current\r\n            .data(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n            else\r\n                updateVis()\r\n\r\n        }\r\n        \r\n\r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n         <div >\r\n            <svg className=\"rot-arr-container\" ref={refElement} id=\"mainSVG\" width=\"600\" height=\"500\">\r\n                <defs>\r\n                    <g \r\n                        id=\"mySymbol\" \r\n                        transform=\"translate(-50 -50) rotate(90, 50, 50)\"\r\n                    >\r\n                        <path \r\n                            id=\"svg_3\"\r\n                            d=\"m0,50l50,-50l50,50l-25,0l0,50l-50,0l0,-50l-25,0z\" \r\n                            strokeLinecap=\"null\" \r\n                            strokeLinejoin=\"null\" \r\n                            strokeDasharray=\"null\" \r\n                            strokeWidth=\"0\" \r\n                            fill=\"#000000\"\r\n                        />\r\n                    </g>\r\n                </defs>\r\n            </svg>\r\n\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Arctangent;","C:\\Users\\raimo\\Documents\\math\\src\\components\\arctangent\\arctanget.js",["513","514","515"],"import * as d3 from \"d3\";\r\nimport { \r\n    select\r\n} from \"d3\";\r\n\r\n/*\r\n * https://observablehq.com/@d3/d3v6-migration-guide#pointer\r\n * https://observablehq.com/@d3/multitouch\r\n */\r\nexport const arctanget = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n    let arrow;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    /*\r\n     * Mihin kohtaa def:stä luettu nuoli sijoitetaan\r\n     */\r\n    let origoX\r\n    let origoY\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            origoX = width / 2\r\n            origoY = height / 2\r\n\r\n            svg = d3\r\n                .select(this)\r\n                //.append('svg')\r\n                .attr(\"viewBox\", [0,0, width, height])\r\n                .on(\"mousemove\", function(event) {\r\n                    const {clientX, clientY} = event\r\n\r\n                    let dx = clientX - origoX\r\n                    let dy = clientY - origoY\r\n\r\n                    let angle = Math.atan2(dy, dx)\r\n                    let asDegrees = (angle * 180 / Math.PI) + 90\r\n\r\n                    d3\r\n                        .select(\"#mySymbol\")\r\n                        .attr(\"transform\", `translate(-50,-50) rotate(${asDegrees}, 50, 50)`);            \r\n                })\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform', ` translate(${width/2},${height/2})`)\r\n\r\n            arrow = gElem\r\n                .selectAll(\"use\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"use\")\r\n                .attr(\"xlink:href\",\"#mySymbol\")\r\n                \r\n            updateData = function() {\r\n\r\n                let str = \"translate(50,50) rotate(45, 50, 50)\"\r\n\r\n                d3\r\n                    .select(\"#mySymbol\")\r\n                    .attr(\"transform\", str);\r\n            }\r\n\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updataWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\rotatingArrowReducer.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\index.js",["516"],"import React from 'react';\r\n\r\nimport Hero from \"./Hero\"\r\nimport Testi from \"./Testi\"\r\n\r\nimport './landingPage.css';\r\n\r\n/*\r\n            <Header />\r\n            <main>\r\n                <Featured />\r\n                <Products />\r\n            </main>\r\n*/\r\nconst LandingPage = () => {\r\n\r\n    return (\r\n        <div className=\"svgHolder\">\r\n            <Hero />\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n/*\r\n      viewBox=\"0 0 396.87 171.98\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      preserveAspectRatio=\"xMidYMid meet\"\r\n      {...props}\r\n\r\n*/\r\n\r\nexport default LandingPage;","C:\\Users\\raimo\\Documents\\math\\src\\components\\frontPage\\header.js",[],["517","518"],"C:\\Users\\raimo\\Documents\\math\\src\\components\\frontPage\\featured.js",["519","520","521","522"],"import React from 'react';\r\n\r\nimport {ReactComponent as Tupu} from \"../../svgImages/tupu.svg\";\r\n// import {ReactComponent as Hupu} from \"../../svgImages/hupu.svg\";\r\nimport {ReactComponent as Lupu} from \"../../svgImages/lupu.svg\";\r\n\r\nimport Hupu from '../../iconComponents/Hupu'\r\nimport IlotulitusRaketti from '../../iconComponents/IlotulitusRaketti';\r\n\r\nconst Featured = () => {\r\n    return (\r\n        <section className=\"featured\">\r\n            <div className=\"container\">\r\n\r\n                <h2 className=\"section-title\">Featured products</h2>\r\n                    \r\n                <div className=\"split\">\r\n\r\n                    <a href=\"#\" className=\"featured_item\">\r\n                        <IlotulitusRaketti />\r\n                        <p className=\"featured_details\"><span className=\"price\">99$</span>homman nimi oli saunaan!</p>\r\n                    </a>\r\n\r\n                    <a href=\"#\" className=\"featured_item\">\r\n                        <Hupu />\r\n                        <p className=\"featured_details\"><span className=\"price\">99$</span>homman nimi oli saunaan!</p>\r\n                    </a>\r\n\r\n                    <a href=\"#\" className=\"featured_item\">\r\n                        <Lupu />\r\n                        <p className=\"featured_details\"><span className=\"price\">99$</span>homman nimi oli saunaan!</p>\r\n                    </a>\r\n\r\n                </div>\r\n                \r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Featured;","C:\\Users\\raimo\\Documents\\math\\src\\components\\frontPage\\products.js",["523","524","525"],"import React from 'react';\r\n\r\nimport {ReactComponent as Spiral} from \"../../svgImages/sprial.svg\";\r\nimport {ReactComponent as Tahti} from \"../../svgImages/tahti.svg\";\r\nimport {ReactComponent as Lahtikko} from \"../../svgImages/lahtikko.svg\";\r\n\r\nconst Products = () => {\r\n    return (\r\n        <section className=\"our-products\">\r\n\r\n            <div className=\"container\">\r\n\r\n                <h2 className=\"section-title\">Tuottehemme</h2>\r\n\r\n                <article className=\"product product-red spacing\">\r\n                    <Spiral />\r\n                    <h3 className=\"product-title\">Attributes</h3>\r\n                    <p className=\"product-description\">Blinking and flashing animation can be problematic for people</p>\r\n                    <a href=\"\" className=\"btn\">Kerro lisää</a>\r\n                </article>\r\n\r\n                <article className=\"product product-yellow spacing\">\r\n                    <Tahti />\r\n                    <h3 className=\"product-title\">Kolpakko</h3>\r\n                    <p className=\"product-description\">Näin huutaa huutosakki loppusoinnuton</p>\r\n                    <a href=\"\" className=\"btn\">Tell me more</a>\r\n                </article>\r\n\r\n                <article className=\"product product-green spacing\">\r\n                    <Lahtikko />\r\n                    <h3 className=\"product-title\">Rahapussi</h3>\r\n                    <p className=\"product-description\">Höpö höpö löpö</p>\r\n                    <a href=\"\" className=\"btn\">Visa mig</a>\r\n                </article>\r\n\r\n            </div>\r\n\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Products;","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\vectorReducer.js",["526"],"import {Partile, Vector} from \"../services/vector\";\r\n\r\nfunction getRandomColor() {\r\n\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n\r\n}\r\n\r\n/*\r\n * https://stackoverflow.com/questions/287903/what-is-the-preferred-syntax-for-defining-enums-in-javascript\r\n\r\n     let newData = fireWorks(state);\r\n    //let newData = deLaFontaine(state);\r\n */\r\nconst ANIMATION = {\r\n    FIREWORKS : {\r\n        name: 'Fire',\r\n        value: 'firework', \r\n        description: \"The amazing Coding Math firework\",\r\n        setup: function(n){\r\n            return getFireworksData(n);\r\n        },\r\n        newState: function(state){\r\n            return fireWorks(state);\r\n        }\r\n    }, \r\n    FOUNTAIN: {\r\n        name: 'Fountain',\r\n        value: 'fountain', \r\n        description: \"The Mind-Blowing Coding Math Fountain\",\r\n        setup: function(n){\r\n            return getFountainData(n);\r\n        },\r\n        newState: function(state){\r\n            return deLaFontaine(state);\r\n        }\r\n    }, \r\n};\r\n\r\nconst getInitialAllowedRangeHeight = () => getInitialHeight() * 0.75;\r\nconst getInitialAllowedRangeWidth = () => getInitialWidth() * 0.75;\r\n\r\nconst getInitialAnimationType = () => ANIMATION.FIREWORKS;\r\n\r\nconst getInitialWidth = () => 600;\r\n\r\nconst getInitialHeight = () => 500;\r\n\r\nconst getInitialNumberOfParticles = () => 100\r\n\r\n/*\r\n * Alustetaan aineisto valitun animaation mukaisilla partikkeleilla\r\n *\r\n * @param aType minkä tyyppinen animaatio halutaan esittää\r\n * @param n montako partikkelia alustetaan\r\n */\r\nconst getData = (aType, n) => aType.setup(n);\r\n\r\n\r\n/*\r\n * Alustetaan aineisto ilotulituksessa esitettävillä partikkeleilla\r\n */\r\nconst getFireworksData = (n) => {\r\n\r\n    let particles = [];\r\n\r\n    for(var i = 0; i < n; i++){\r\n        particles.push(getFireworksParticle());\r\n    }\r\n\r\n    return particles;\r\n}\r\n\r\n\r\n/* \r\n * Alustetaan yksittäinen ilotulituksessa käytettävä partikkeli\r\n */\r\nconst getFireworksParticle = (posY) => {\r\n\r\n    return new Partile(\r\n        0,\r\n        0,\r\n        Math.random() * 5 + 2,\r\n        Math.random() * Math.PI * 2,\r\n        getRandomColor()\r\n    )   \r\n}\r\n\r\n/*\r\n * Alustetaan aineisto \"suihkulähteessä\" esitettävillä partikkeleilla\r\n * - edge detection menetelmä on Emitter\r\n */\r\nconst getFountainData = (n) => {\r\n\r\n    let particles = [];\r\n\r\n    let originY = getInitialAllowedRangeHeight() / 2;\r\n\r\n\r\n    for(var i = 0; i < n; i++){\r\n        particles.push(getFountainParticle(originY))\r\n    }\r\n\r\n    return particles;\r\n}\r\n\r\n/*\r\n * Yksittäisen suihkulähteessä esitettävän partikkelin alustus\r\n */\r\nconst getFountainParticle = (posY) => {\r\n\r\n    return new Partile(\r\n        0,\r\n        posY,\r\n        Math.random() * 8 + 5,\r\n        -Math.PI / 2 + (Math.random() * 0.2 - 0.1),\r\n       'navy'\r\n    );    \r\n}\r\n\r\n/* \r\n * S E T U P   I N I T I A L   V A L U E S\r\n */\r\nconst initialState = {\r\n\r\n    animation: getInitialAnimationType(),\r\n    animationTypes: ANIMATION,\r\n    allowedRangeWidth: getInitialAllowedRangeWidth(),\r\n    allowedRangeHeight: getInitialAllowedRangeHeight(),\r\n    numberOfParticles: getInitialNumberOfParticles(),\r\n    minNumberOfParticles: getInitialNumberOfParticles() * 0.01,\r\n    maxNumberOfParticles: getInitialNumberOfParticles() * 2.0,\r\n    data: getData(getInitialAnimationType(), getInitialNumberOfParticles()),\r\n    isActive: false,\r\n    height: getInitialHeight(),\r\n    width: getInitialWidth(),\r\n    round: 0\r\n}\r\n\r\n/*\r\n * R E A C T I O N S   T O W A R D S    A C T I O N S\r\n */\r\n\r\n /*\r\n  * Partikkelien uuden sijaintipaikan laskeminen\r\n  *\r\n  * Välitetään tehtävä käytössä olevan animaatiotyypin mukaiselle funktiolle: \r\n  * - deLaFontaine mikäli suihkulähde\r\n  * - fireWorks mikäli ilotulitus\r\n  */\r\nconst getNewState = (aType, state) => aType.newState(state);\r\n\r\n  /*\r\n  * EDGE DETECTION: kierrätetään aktiiviselta aluuelta poistuvat partikkelit\r\n  * - seurataan vain \"pohja ja reunojen vuotoa\", korkeussuunta ei nyt kiinnosta\r\n  */\r\nconst deLaFontaine = (state) => {\r\n    /*\r\n      * Piirtoalueena käytetään g-elementtiä, jonka origo on siirretty\r\n      * esittävän SVG-elementin keskipisteeseen, jolloin piirtoalueen\r\n      * rajat ovat puoli leveyttä/korkeutta keskipisteen molemmin puolin\r\n      */\r\n     let halfOfHeight = state.allowedRangeHeight / 2;\r\n \r\n     let newData = state.data\r\n         .map(p => p.accelerate())\r\n         .map((p,i) => {\r\n \r\n             let pos = p.getVector();\r\n \r\n             // - onko korkeussuunnassa alueen sisällä\r\n             if(pos.getY() > halfOfHeight){\r\n                return getFountainParticle(halfOfHeight);\r\n             }\r\n \r\n             return p;\r\n         })\r\n \r\n     return newData;\r\n }\r\n\r\n /*\r\n  * EDGE DETECTION: poistetaan aktiiviselta aluuelta poistuvat partikkelit\r\n  */\r\nconst fireWorks = (state) => {\r\n   /*\r\n     * Piirtoalueena käytetään g-elementtiä, jonka origo on siirretty\r\n     * esittävän SVG-elementin keskipisteeseen, jolloin piirtoalueen\r\n     * rajat ovat puoli leveyttä/korkeutta keskipisteen molemmin puolin\r\n     */\r\n    let halfOfWidth = state.allowedRangeWidth / 2;\r\n    let halfOfHeight = state.allowedRangeHeight / 2;\r\n\r\n    let newData = state.data\r\n        .map(p => p.accelerate())\r\n        .filter((p,i) => {\r\n\r\n            let pos = p.getVector();\r\n\r\n            // - onko leveyssuunnassa alueen sisällä\r\n            if(pos.getX() < -halfOfWidth || pos.getX() > halfOfWidth){\r\n                return false;\r\n            }\r\n\r\n            // - onko korkeussuunnassa alueen sisällä\r\n            if(pos.getY() < -halfOfHeight || pos.getY() > halfOfHeight){\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        })\r\n\r\n    return newData;\r\n}\r\n\r\n/*\r\n * Lasketaan partikkelien uudet sijaintipaikat\r\n */\r\nconst calculateNewState = (state) => {\r\n\r\n    let newRound = state.round+1;\r\n    let newData = getNewState(state.animation, state);\r\n\r\n    return {\r\n        ...state,\r\n        data: newData.length > 0 ? newData : [],\r\n        round: newRound\r\n    }\r\n}\r\n\r\n/*\r\n * Muutetaan animoitavien partikkelien määrää\r\n */ \r\nconst changeParticleCount = (state, data) => {\r\n\r\n    let newNOP = data.particles;\r\n    let newData = getData(state.animation, newNOP);\r\n\r\n    return {\r\n        ...state,\r\n        numberOfParticles: newNOP,\r\n        data: newData\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * Asetetaan esitettävän animaation tyyppi\r\n * - vaihtoehtoina ovat Firework ja Fountain\r\n */\r\nconst changeAnimationType = (state, data) => {\r\n\r\n    const newActive = Object.entries(state.animationTypes)\r\n        .filter(([key, value]) => {\r\n            return  value.value === data.type;\r\n        })[0][1];\r\n\r\n    let newData = getData(newActive, state.numberOfParticles);\r\n\r\n\r\n    return {\r\n        ...state,\r\n        animation: newActive,\r\n        data: newData\r\n    }\r\n}\r\n\r\n/* \r\n * A C T I O N S\r\n */\r\n\r\n/*\r\n * Animaation pyöritys\r\n * - alkuosa nollaa timerin, mikäli animaatio on ollut pyörimässä, pysäytetään se\r\n * - mikäli animaation halutaan käyvän (isActive === true), käynnistetään \r\n *   timeri, joka pyörittää seuraavan  aseman laskevaa tilapäivitystä\r\n * - mikäli action-kutsu tulee sen jälkeen, kun isActive -tila on vaihtunut\r\n *   suoritetaan vain alkuosa, eli pyörivän timerin sulkeminen...\r\n */\r\nexport const animate = () => {\r\n\r\n    return (dispatch, state) => {\r\n\r\n        /*\r\n         * Napataan ajastimen id talteen, jotta sille voidaan antaa pysäytyskäsky\r\n         */\r\n        let intervalId;\r\n\r\n        /*\r\n         * Voidaanko animaatio käynnistää?\r\n         * - ei liity ajastimeen, vaan siihen onko käyttäjä käynnistänyt toiminnon\r\n         */\r\n        let isActive = state().vector.isActive;\r\n\r\n        /*\r\n         * Onko ajastin päällä.\r\n         * - animaation sujuvuuden kannalta aikaisempi kierros pitää tarvittaessa keskeyttää?\r\n         */\r\n        let timerRunning = state().timer.running;\r\n        let timerId = state().timer.id;\r\n\r\n        if(timerRunning) {\r\n            clearInterval(timerId);\r\n            dispatch({type: 'TIMER_CLEAR'});\r\n        } \r\n\r\n        if(isActive){\r\n\r\n            intervalId = setInterval(() => {\r\n\r\n                dispatch({\r\n                    type: 'PHYSICS_ANIMATE',\r\n                    data: {}\r\n                })\r\n    \r\n            }, 25)\r\n\r\n            // kirjataan timerin käynnistys muistiin\r\n            dispatch({\r\n                type: 'TIMER_START',\r\n                data: {\r\n                    id: intervalId\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const liikuta = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'PHYSICS_ANIMATE',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n * Kytketään animaation käynnistävä muuttuja joko päälle tai pois päältä\r\n * - muuttuja: isActive\r\n */\r\nexport const toggleActiveState = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'PHYSICS_TOGGLE_ACTIVE',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Partikkeleille sallitun alueen korkeuden säätö\r\n */\r\nexport const setAllowedRangeHeight = (val) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'PHYSICS_SET_HEIGHT',\r\n            data: {\r\n                allowedRangeHeight: val\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Partikkeleille sallitun alueen leveyden säätö\r\n */\r\nexport const setAllowedRangeWidth = (val) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'PHYSICS_SET_WIDTH',\r\n            data: {\r\n                allowedRangeWidth: val\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Kytketään animaation käynnistävä muuttuja joko päälle tai pois päältä\r\n * - muuttuja: isActive\r\n */\r\nexport const setAnimationType = (val) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'PHYSICS_SET_ANIMATION_TYPE',\r\n            data: {\r\n                type: val\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Partikkeleille sallitun alueen korkeuden säätö\r\n */\r\nexport const setNumberOfParticles = (val) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'PHYSICS_SET_PARTICLE_COUNT',\r\n            data: {\r\n                particles: val\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nconst vectorReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case 'PHYSICS_ANIMATE':\r\n\r\n            return calculateNewState(state);\r\n\r\n        case 'PHYSICS_SET_ANIMATION_TYPE':\r\n            return changeAnimationType(state, action.data);\r\n\r\n        case 'PHYSICS_SET_PARTICLE_COUNT':\r\n\r\n            return changeParticleCount(state, action.data);\r\n\r\n        case 'PHYSICS_SET_HEIGHT':\r\n\r\n            return {\r\n                ...state,\r\n                allowedRangeHeight: action.data.allowedRangeHeight\r\n            }\r\n\r\n        case 'PHYSICS_SET_WIDTH':\r\n\r\n            return {\r\n                ...state,\r\n                allowedRangeWidth: action.data.allowedRangeWidth\r\n            }\r\n\r\n        case 'PHYSICS_TOGGLE_ACTIVE':\r\n\r\n            const newActiveState = !state.isActive\r\n\r\n            return {\r\n                ...state,\r\n                isActive: newActiveState\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default vectorReducer;\r\n","C:\\Users\\raimo\\Documents\\math\\src\\layout\\vector\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\services\\vector.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\index.js",["527","528","529"],"import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {animate, toggleActiveState} from \"../../reducers/vectorReducer\";\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport {physics} from \"./physics\";\r\n\r\nconst VectorPhysics = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null);\r\n\r\n    const {\r\n        allowedRangeHeight, \r\n        allowedRangeWidth, \r\n        data, \r\n        height, \r\n        isActive, \r\n        width, \r\n        opacity\r\n    } = useSelector(state => {\r\n\r\n        let opacity = (100 - state.vector.round)/100;\r\n\r\n        return {\r\n            ...state.vector,\r\n            opacity: opacity>0.2?opacity:0.2\r\n        }\r\n\r\n    })\r\n\r\n    /*\r\n     * D3 -grafiikan alustus\r\n     */\r\n    const initVis = () => {\r\n\r\n        visFunction.current = physics()\r\n            .data(data)\r\n            .height(height)\r\n            .width(width)\r\n            .heightOfAllowedRange(allowedRangeHeight)\r\n            .widthOfAllowedRange(allowedRangeWidth)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n    }\r\n\r\n    /*\r\n     * D3-grafiikan (aineiston) päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        visFunction.current\r\n            .opacity(opacity)\r\n            .data(data)\r\n              \r\n    }\r\n\r\n    /*\r\n     * Partikkeleille sallitusn alueen korkeuden päivitys\r\n     */\r\n    useEffect(() => {\r\n\r\n        if(visFunction.current !== null){\r\n\r\n            visFunction.current\r\n                .heightOfAllowedRange(allowedRangeHeight);         \r\n        }\r\n\r\n        return () => { console.log('width cleanup') };\r\n\r\n    }, [allowedRangeHeight])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(visFunction.current !== null){\r\n\r\n            visFunction.current\r\n                .widthOfAllowedRange(allowedRangeWidth);         \r\n        }\r\n\r\n        return () => { console.log('width cleanup') };\r\n\r\n    }, [allowedRangeWidth])\r\n\r\n    useEffect(() => {\r\n\r\n        //if(data && data.length){\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n            else\r\n                updateVis()\r\n\r\n        //}\r\n\r\n            if(data.length == 0) {\r\n                dispatch(toggleActiveState())\r\n            }\r\n\r\n        return () => {\r\n            console.log('data cleanup')\r\n        }\r\n        \r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(animate())\r\n\r\n        return () => {\r\n            console.log('isActive cleanup')\r\n        }\r\n\r\n    }, [isActive])\r\n\r\n    return (\r\n        <>\r\n            <div ref={refElement} className=\"cm-vectorPhysics-container\">\r\n            </div>  \r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default VectorPhysics;","C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\physics.js",["530","531"],"import * as d3 from \"d3\";\r\nimport { \r\n    select\r\n} from \"d3\";\r\n\r\nexport const physics = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n    let backgroundRect;\r\n    let circles;\r\n\r\n    let data = []\r\n\r\n    // \"Kankaan\" leveys ja korkeus\r\n    let width = 600;        \r\n    let height = 600;\r\n\r\n    // millä alueella objektien pitää pysyä\r\n    let heightOfAllowedRange = 400;\r\n    let widthOfAllowedRange = 400;\r\n\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let opacity = 1;\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n    let updateAllowedRange;\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            svg = d3\r\n                .select(this)\r\n                .append('svg')\r\n                .attr(\"viewBox\", [0,0, width, height]);\r\n                    //.attr(\"width\", width)\r\n                    //.attr(\"height\", height);\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform', ` translate(${width/2},${height/2})`)\r\n\r\n                \r\n            backgroundRect = gElem\r\n                .append('rect')\r\n                    .attr(\"x\", -widthOfAllowedRange/2)\r\n                    .attr(\"y\", -heightOfAllowedRange/2)\r\n                    .attr(\"width\", widthOfAllowedRange)\r\n                    .attr(\"height\", heightOfAllowedRange)\r\n                    .attr(\"stroke\",\"pink\")\r\n                    .attr(\"stroke-width\",\"5\")\r\n                    .attr(\"fill\", \"none\");\r\n                    \r\n\r\n            circles = gElem\r\n                .selectAll(\"circle\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"circle\")\r\n                    .style(\"stroke\", \"none\")\r\n                    .style(\"fill\", \"navy\")\r\n                    .attr(\"r\", 6)\r\n                    .attr(\"cx\", d => d.getVector().getX())\r\n                    .attr(\"cy\", d => d.getVector().getY())\r\n                    .attr(\"fill-opacity\", opacity)\r\n\r\n\r\n\r\n            updateData = function() {\r\n\r\n                circles = gElem\r\n                    .selectAll(\"circle\")\r\n                    .data(data)\r\n\r\n                circles\r\n                        .style(\"fill\", d => d.getColor())\r\n                        .attr(\"cx\", d => d.getVector().getX())\r\n                        .attr(\"cy\", d => d.getVector().getY())\r\n                        .attr(\"fill-opacity\", opacity)\r\n\r\n                circles\r\n                    .enter()\r\n                        .append(\"circle\")\r\n                            .style(\"stroke\", \"none\")\r\n                            .style(\"fill\", \"navy\")\r\n                            .attr(\"r\", 6)\r\n                            .attr(\"cx\", d => d.getVector().getX())\r\n                            .attr(\"cy\", d => d.getVector().getY())\r\n                            .attr(\"fill-opacity\", opacity)\r\n\r\n                circles\r\n                    .exit()\r\n                    .remove()\r\n\r\n            }\r\n\r\n            updateHeight = function() {}\r\n\r\n            updateWidth = function() {}\r\n\r\n            updateAllowedRange = function() {\r\n\r\n                backgroundRect\r\n                    .attr(\"x\", -widthOfAllowedRange/2)\r\n                    .attr(\"y\", -heightOfAllowedRange/2)\r\n                    .attr(\"width\", widthOfAllowedRange)\r\n                    .attr(\"height\", heightOfAllowedRange)\r\n\r\n                \r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    /*\r\n     * Objektien pitää pysyä rajatun alueen sisällä, alue on pienempi kuin\r\n     * animaation esittämiseen käytetty SVG -elementti, jotta nähdään\r\n     * objektit pysyvät annetuissa rajoissa\r\n     */\r\n    chart.heightOfAllowedRange = function(val){\r\n\r\n        if(!arguments.length) return heightOfAllowedRange;\r\n\r\n        heightOfAllowedRange = val;\r\n\r\n        if(typeof updateAllowedRange === 'function')\r\n            updateAllowedRange();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.opacity = function(val){\r\n \r\n        if(!arguments.length) return opacity;\r\n\r\n        opacity = val;\r\n   \r\n        return chart       \r\n    }\r\n\r\n    /*\r\n     * Animaation esittämiseen käytettävän SVG -elementin leveys\r\n     */ \r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updateWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n\r\n    /*\r\n     * Objektien pitää pysyä rajatun alueen sisällä, alue on pienempi kuin\r\n     * animaation esittämiseen käytetty SVG -elementti, jotta nähdään\r\n     * objektit pysyvät annetuissa rajoissa\r\n     */\r\n    chart.widthOfAllowedRange = function(val){\r\n\r\n        if(!arguments.length) return widthOfAllowedRange;\r\n\r\n        widthOfAllowedRange = val;\r\n\r\n        if(typeof updateAllowedRange === 'function')\r\n            updateAllowedRange();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\layout\\advancedAcceleration\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\index.js",["532","533","534","535","536"],"import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport useEventListener from \"../../hooks/useEventListener\";\r\n\r\nimport {\r\n    accelerate, \r\n    animate, \r\n    kaannaVasen,\r\n    kaannaOikea, \r\n    liikuta, \r\n    slowdown, \r\n    toggleActiveState\r\n} from \"../../reducers/advAccelerationReducer\";\r\n\r\nimport {d3Acceleration} from \"./d3Acceleration\";\r\n\r\nimport './acceleration.css';\r\n\r\nconst DynamicAcceleration = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null)\r\n\r\n    const {data, height, isActive, width, xScale, yScale} = useSelector(state => state.acceleration)\r\n\r\n    /*\r\n     * d3 -komponentin alustus\r\n     */\r\n    const initVis = () => {\r\n\r\n        visFunction.current = d3Acceleration()\r\n            .data(data)\r\n            .height(height)\r\n            .width(width)\r\n            .xScale(xScale)\r\n            .yScale(yScale)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n    }\r\n\r\n    /*\r\n     * D3 -komponentin päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        visFunction.current\r\n            .data(data)\r\n            \r\n    }\r\n\r\n\r\n    /*\r\n     * Painikkeiden tapahtumakäsittelijät\r\n     * https://stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript\r\n     */\r\n    const keyDownHandler = ({ key }) => {\r\n\r\n        switch(String(key)) {\r\n            case 'ArrowUp':\r\n                dispatch(accelerate({key: 'ArrowUp'}))\r\n                break;\r\n\r\n            case 'ArrowRight':\r\n                dispatch(accelerate({key: 'ArrowRight'}))\r\n                break;\r\n\r\n            case 'ArrowLeft':\r\n                dispatch(accelerate({key: 'ArrowLeft'}))\r\n                break;\r\n\r\n            default:\r\n                // code block\r\n        } \r\n    }\r\n\r\n    const keyUpHandler = ({ key }) => {\r\n\r\n        switch(String(key)) {\r\n            case 'ArrowUp':\r\n                dispatch(slowdown({key: 'ArrowUp'}))\r\n                break;\r\n \r\n            case 'ArrowRight':\r\n                dispatch(slowdown({key: 'ArrowRight'}))\r\n                break;\r\n   \r\n            case 'ArrowLeft':\r\n                dispatch(slowdown({key: 'ArrowLeft'}))\r\n                break;\r\n   \r\n            default:\r\n                // code block\r\n        } \r\n    }\r\n\r\n    useEventListener('keydown', keyDownHandler);\r\n    useEventListener('keyup', keyUpHandler);\r\n\r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n            else\r\n                updateVis()\r\n\r\n        }\r\n        \r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(animate())\r\n\r\n    }, [isActive])\r\n\r\n\r\n    /*\r\n     * transform=\"translate(-50 -50) rotate(90, 50, 50) scale(1.0,1.0)\r\n     * transform=\"translate(-5 -5) rotate(0, 5, 5) scale(0.1,0.1)\"\r\n     */\r\n    return (\r\n        <>\r\n            <div style={{border: \"1px solid navy\", margin: \"auto\", maxWidth:\"600px\"}}>\r\n                <svg ref={refElement} id=\"mainSVG\">\r\n                    <defs>\r\n                        <g id=\"mySymbol\">\r\n                            <path \r\n                                id=\"theShip\"\r\n                                d=\"m0,50l50,-50l50,50l-25,0l0,50l-50,0l0,-50l-25,0z\" \r\n                                strokeLinecap=\"null\" \r\n                                strokeLinejoin=\"null\" \r\n                                strokeDasharray=\"null\" \r\n                                strokeWidth=\"0\" \r\n                                fill=\"#000000\"\r\n                            />\r\n                        </g>\r\n                    </defs>\r\n                </svg>\r\n            </div>\r\n            <button onClick={() => dispatch(toggleActiveState())}>\r\n                {isActive?'Pysäytä':'Käynnistä'}\r\n            </button>\r\n            <p>Korjaa: Ei kiihdytä!</p>\r\n        </>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default DynamicAcceleration;","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\advAccelerationReducer.js",["537"],"import {Ship, Vector} from \"../services/vector\";\r\n\r\nfunction getRandomColor() {\r\n\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n\r\n}\r\n\r\nconst getInitialHeight = () => 600\r\nconst getInitialNumberOfParticles = () => 1\r\nconst getInitialRotation = () => 0\r\nconst getInitialWidth = () => 600\r\nconst getInitialXscale = () => 0.25\r\nconst getInitialYscale = () => 0.25\r\n\r\nconst getInitialData = (n, height, width, rotation) => {\r\n\r\n    let data = [];\r\n\r\n    for(var i = 0; i < n; i++){\r\n        data.push(\r\n            new Ship(\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                width,\r\n                height,\r\n                getInitialXscale(),\r\n                getInitialYscale(),\r\n                rotation\r\n            )\r\n        )\r\n    }\r\n\r\n    return data\r\n}\r\n\r\n\r\nconst initialState = {\r\n\r\n    numberOfParticles: getInitialNumberOfParticles(),\r\n    data: getInitialData(getInitialNumberOfParticles(),getInitialHeight(),getInitialWidth(),getInitialRotation()),\r\n    isActive: false,\r\n    thrust: new Vector(0,0),\r\n    step: {min: 0.0, val: 0.1, max: 1.0, step: 0.01},\r\n    thrusting: false,\r\n    turningLeft: false,\r\n    turningRight: false,\r\n    height: getInitialHeight(),     // Tulostukseen käytettävän SVG -elementin korkeus\r\n    width: getInitialWidth(),       // Tulostukseen käytettävän SVG -elementin leveys\r\n    xScale: getInitialXscale(),     // Alusta esittävän nuolen leveyden skaalaus\r\n    yScale: getInitialYscale()                     // Alusta esittävän nuolen korkeuden skaalaus\r\n}\r\n\r\n\r\n/*\r\n *\r\n */\r\nconst calculateNewState = (state) => {\r\n\r\n    let angle = state.turningLeft\r\n                ? -0.05\r\n                : state.turningRight\r\n                    ? 0.05\r\n                    : 0    \r\n\r\n    let newThrust \r\n\r\n    let newData = state.data.map(p => {\r\n\r\n        let bar = p.setRotation(angle)  // Aluksen nokkaa käännetään aina kun painike pohjassa\r\n\r\n        newThrust =  new Vector(0,0)\r\n\r\n        /*\r\n         * Siirretäänkö alusta\r\n         */\r\n        if(state.thrusting)\r\n            newThrust = newThrust.setLength(state.step.val)\r\n    \r\n        newThrust = newThrust.setAngle(bar.getRotation())\r\n\r\n        return bar.accelerate(newThrust)\r\n    })\r\n\r\n\r\n    return {\r\n        ...state,\r\n        data: newData,\r\n        thrust: newThrust\r\n    }\r\n}\r\n\r\n/*\r\n * @todo: Jos jompikumpi ArrowLeft tai ArrowRight on painettuna, toisen painikkeen\r\n *        painamiseen ei tällöin reagoida\r\n */\r\nconst thrustAccelerate = (state, data) => {\r\n    \r\n    return {\r\n        ...state,\r\n        thrusting: data.key==='ArrowUp'?true:state.thrusting,\r\n        turningLeft:  data.key==='ArrowLeft'?true:state.turningLeft,\r\n        turningRight:  data.key==='ArrowRight'?true:state.turningRight,\r\n        isActive: true\r\n    }\r\n}\r\n\r\n/*\r\n * N O L L A A   A I N O A S T A A N    V A P A U T E T T U !\r\n */\r\nconst thrustSlowdown = (state, data) => {\r\n    \r\n    return {\r\n        ...state,\r\n        thrusting: data.key==='ArrowUp'?false:state.thrusting,\r\n        turningLeft:  data.key==='ArrowLeft'?false:state.turningLeft,\r\n        turningRight:  data.key==='ArrowRight'?false:state.turningRight,\r\n        isActive: false\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * A C T I O N S\r\n */\r\n\r\nexport const accelerate = (val) => {\r\n\r\n    return (dispatch) => {\r\n\r\n        dispatch({\r\n            type: 'THRUST_ACCELERATE',\r\n            data: val\r\n        })\r\n    }    \r\n\r\n}\r\n\r\n\r\n/*\r\n * Animaation pyöritys\r\n * - alkuosa nollaa timerin, mikäli animaatio on ollut pyörimässä, pysäytetään se\r\n * - mikäli animaation halutaan käyvän (isActive === true), käynnistetään \r\n *   timeri, joka pyörittää seuraavan  aseman laskevaa tilapäivitystä\r\n * - mikäli action-kutsu tulee sen jälkeen, kun isActive -tila on vaihtunut\r\n *   suoritetaan vain alkuosa, eli pyörivän timerin sulkeminen...\r\n */\r\nexport const animate = () => {\r\n\r\n    return (dispatch, state) => {\r\n\r\n        /*\r\n         * Napataan ajastimen id talteen, jotta sille voidaan antaa pysäytyskäsky\r\n         */\r\n        let intervalId;\r\n\r\n        /*\r\n         * Voidaanko animaatio käynnistää?\r\n         * - ei liity ajastimeen, vaan siihen onko käyttäjä käynnistänyt toiminnon\r\n         */\r\n        let isActive = state().acceleration.isActive;\r\n\r\n        /*\r\n         * Onko ajastin päällä.\r\n         * - animaation sujuvuuden kannalta aikaisempi kierros pitää tarvittaessa keskeyttää?\r\n         */\r\n        let timerRunning = state().timer.running;\r\n        let timerId = state().timer.id;\r\n\r\n        if(timerRunning) {\r\n            clearInterval(timerId);\r\n            dispatch({type: 'TIMER_CLEAR'});\r\n        } \r\n\r\n        if(isActive){\r\n\r\n            intervalId = setInterval(() => {\r\n\r\n                dispatch({\r\n                    type: 'THRUST_ANIMATE',\r\n                    data: {}\r\n                })\r\n    \r\n            }, 25)\r\n\r\n                    // kirjataan timerin käynnistys muistiin\r\n            dispatch({\r\n                type: 'TIMER_START',\r\n                data: {\r\n                    id: intervalId\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const kaannaOikea = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'THRUST_ACCELERATE',\r\n            data: {key: 'ArrowRight'}\r\n        })\r\n\r\n        dispatch({\r\n            type: 'THRUST_ANIMATE',\r\n            data: {}\r\n        })\r\n\r\n        dispatch({\r\n            type: 'THRUST_SLOWDOWN',\r\n            data: {key: 'ArrowRight'}\r\n        })\r\n           \r\n    }\r\n}\r\n\r\nexport const kaannaVasen = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'THRUST_ACCELERATE',\r\n            data: {key: 'ArrowLeft'}\r\n        })\r\n\r\n        dispatch({\r\n            type: 'THRUST_ANIMATE',\r\n            data: {}\r\n        })\r\n\r\n        dispatch({\r\n            type: 'THRUST_SLOWDOWN',\r\n            data: {key: 'ArrowLeft'}\r\n        })\r\n           \r\n    }\r\n}\r\n\r\nexport const kiihdyta = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'THRUST_ACCELERATE',\r\n            data: {key: 'ArrowUp'}\r\n        })\r\n        \r\n        dispatch({\r\n            type: 'THRUST_ANIMATE',\r\n            data: {}\r\n        })\r\n\r\n        dispatch({\r\n            type: 'THRUST_SLOWDOWN',\r\n            data: {key: 'ArrowUp'}\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport const liikuta = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'THRUST_ANIMATE',\r\n            data: {}\r\n        })\r\n\r\n    }\r\n}\r\n\r\n/*\r\n * Kytketään animaation käynnistävä muuttuja joko päälle tai pois päältä\r\n * - muuttuja: isActive\r\n */\r\nexport const toggleActiveState = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'THRUST_TOGGLE_ACTIVE',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const slowdown = (val) => {\r\n\r\n    return (dispatch) => {\r\n\r\n        dispatch({\r\n            type: 'THRUST_SLOWDOWN',\r\n            data: val\r\n        })\r\n    }    \r\n\r\n}\r\n\r\n/*\r\n * Step määrittää kiihtyvyyden säätämisen perusyksikön, siis kuinka paljon\r\n * aluksen vauhti kiihtuu, kun \"kaasua painetaan yhden kerran\"\r\n */\r\nexport const updateStepValue= (val) => {\r\n\r\n    return (dispatch) => {\r\n\r\n        dispatch({\r\n            type: 'THRUST_SET_STEP_VALUE',\r\n            data: val\r\n        })\r\n    }    \r\n\r\n}\r\n\r\n\r\n\r\nconst advancedAccelerationReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case 'THRUST_ANIMATE':\r\n\r\n            return calculateNewState(state);\r\n\r\n        case 'THRUST_ACCELERATE':\r\n\r\n            return thrustAccelerate(state, action.data);\r\n\r\n        case 'THRUST_PUSH_ONE_ON':\r\n\r\n            return {\r\n                ...state,\r\n                thrusting: true\r\n            };\r\n\r\n        case 'THRUST_ROTATE_ONE_OFF':\r\n\r\n            return {\r\n                ...state,\r\n                isActive: false\r\n            };\r\n\r\n        case 'THRUST_SLOWDOWN':\r\n\r\n            return thrustSlowdown(state, action.data);\r\n\r\n        case 'THRUST_SET_STEP_VALUE':\r\n\r\n            const updatedStep = {\r\n                ...state.step,\r\n                val: action.data.stepValue\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                step: updatedStep\r\n            };\r\n\r\n        case 'THRUST_TOGGLE_ACTIVE':\r\n\r\n            const newActiveState = !state.isActive\r\n\r\n            return {\r\n                ...state,\r\n                isActive: newActiveState\r\n            }\r\n\r\n        \r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default advancedAccelerationReducer;\r\n","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\d3Acceleration.js",["538","539","540","541"],"import * as d3 from \"d3\";\r\nimport { \r\n    select\r\n} from \"d3\";\r\nimport { accelerate } from \"../../reducers/advAccelerationReducer\";\r\n\r\nexport const d3Acceleration = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n\r\n    let gCenterOfShip;   // Tapahtumapaikka \r\n    let gRotationOfShip; // Kuinka paljon alusta käännetään\r\n    let gOriginOfShip;   // Aluksen keskipisteen siirto pyörittämisen origoon\r\n    let gScalingOfShip;  // Skaalataan alusta esittävä kuva haluttuun kokoon\r\n    let arrow;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let widthOfDefsElement = 100;\r\n    let heightOfDefsElement = 100;\r\n    let xScale = 1;\r\n    let yScale = 1;\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n\r\n    /*\r\n     * Funktiot joiden avulla:\r\n     * - määritetään aluksen sijaintipaikka\r\n     * - haluttu kierto\r\n     * - piirrettävän kuvan skaalaus haluttuun kokoon\r\n     */\r\n    const getCenterOfShip = (d) => {\r\n\r\n//console.log(\"............ CENTER ..................\")\r\n//console.log(d.getVector().getX())\r\n\r\n        return `translate(${d.getVector().getX()},${d.getVector().getY()})`\r\n    }\r\n\r\n    const getRotationOfShip = (d) => {\r\n\r\n        let asDegrees = ((d.getRotation()) * 180 / Math.PI) + 90\r\n\r\n        return `rotate(${asDegrees})`\r\n    }\r\n\r\n    const getShipCenterToOrigo = (d) => {\r\n        let xTranslate = (widthOfDefsElement / -2) * xScale\r\n        let yTranslate = (heightOfDefsElement / -2) * yScale\r\n\r\n        return `translate(${xTranslate},${yTranslate})`\r\n    }\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            svg = d3\r\n                .select(this)\r\n                //.append('svg')\r\n                .attr(\"viewBox\", [0,0, width, height])\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                    .attr('transform', `translate(${width/2},${height/2})`)\r\n\r\n\r\n\r\n            \r\n            gCenterOfShip = gElem\r\n                .selectAll('.ship')\r\n                .data(data)\r\n                .enter()\r\n                .append('g')\r\n                    .attr('transform', d => getCenterOfShip(d))\r\n                    .attr('class','ship')\r\n\r\n            gRotationOfShip = gCenterOfShip\r\n                .append('g')\r\n                .attr('transform', d => getRotationOfShip(d))  \r\n                \r\n            gOriginOfShip = gRotationOfShip\r\n                .append('g')\r\n                .attr('transform', d => getShipCenterToOrigo(d)) \r\n\r\n            gScalingOfShip = gOriginOfShip\r\n                .append('g')\r\n                .attr(\"transform\", `scale(${xScale} ${yScale})`)\r\n\r\n            arrow = gScalingOfShip\r\n                .append(\"use\")\r\n                    .attr(\"href\",\"#mySymbol\")\r\n                    .attr(\"id\",\"fooBar\")\r\n\r\n                    gElem\r\n                    .append(\"line\")\r\n                    .attr(\"x1\", 0)\r\n                    .attr(\"y1\", 0)\r\n                    .attr(\"x2\", 300)\r\n                    .attr(\"y2\", 0)\r\n                    .style(\"stroke\", \"red\")\r\n    \r\n                gElem\r\n                    .append(\"line\")\r\n                    .attr(\"x1\", 0)\r\n                    .attr(\"y1\", 0)\r\n                    .attr(\"x2\", 0)\r\n                    .attr(\"y2\", 300)\r\n                    .style(\"stroke\", \"red\")\r\n    \r\n            \r\n\r\n            updateData = function() {\r\n\r\n                gCenterOfShip\r\n                    .data(data)\r\n                        .attr('transform', d => getCenterOfShip(d))\r\n\r\n                gRotationOfShip\r\n                    .data(data)\r\n                        .attr('transform', d => getRotationOfShip(d))  \r\n\r\n                gOriginOfShip\r\n                    .data(data)\r\n                        .attr('transform', d => getShipCenterToOrigo(d));\r\n\r\n            }\r\n\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updateWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    /*\r\n     * Minkä verran alusta esittävän nuolen leveyttä skaalataan\r\n     */\r\n    chart.xScale = function(val){\r\n\r\n        if(!arguments.length) return xScale;\r\n\r\n        xScale = val;\r\n\r\n        return chart\r\n\r\n    }\r\n\r\n    /*\r\n     * Minkä verran alusta esittävän nuolen leveyttä skaalataan\r\n     */\r\n    chart.yScale = function(val){\r\n\r\n        if(!arguments.length) return yScale;\r\n\r\n        yScale = val;\r\n\r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\hooks\\useEventListener.js",["542"],"import {useEffect, useRef} from 'react'\r\n\r\n/*\r\n * https://usehooks.com/useEventListener/\r\n */\r\nconst useEventListener = (eventName, handler, element = window) => {\r\n\r\n    const savedHandler = useRef();\r\n\r\n    useEffect(() => {\r\n        savedHandler.current = handler;\r\n    }, [handler]);\r\n\r\n    useEffect(() => {\r\n\r\n        /*\r\n         * Varmistetaan, että elementti tukee addEventListner -toimintoa\r\n         */\r\n        const isSupported = element && element.addEventListener;\r\n\r\n        if(!isSupported) return;\r\n\r\n        /*\r\n         * Luodaan tapahtumankäsittelijä joka kutsuu ref:iin\r\n         * tallettua callback-funktiota\r\n         */\r\n        const eventListener = event => savedHandler.current(event);\r\n\r\n        element.addEventListener(eventName, eventListener)\r\n\r\n        /*\r\n         * Poistetaan tapahtumankäsittelijä sivulta poistuttaessa?\r\n         */\r\n        return () => {\r\n            element.removeEventListener(eventName, eventListener);\r\n        }\r\n\r\n    }, [eventName])\r\n\r\n}\r\n\r\nexport default useEventListener;","C:\\Users\\raimo\\Documents\\math\\src\\layout\\tyomaa\\index.js",["543"],"import React from 'react';\r\n\r\nimport Recursion from \"../../d3Components/recursion\"\r\nimport './tyomaa.css';\r\n\r\n\r\nconst TestArea = () => {\r\n\r\n    const a = () => {\r\n        return (\r\n            <Recursion />\r\n        )\r\n    }\r\n\r\n    const b = () => {\r\n        return (\r\n            <div style={{background: \"white\"}}>\r\n                <svg width=\"300\" height=\"300\">\r\n                    <defs>\r\n                        <linearGradient \r\n                            id=\"Gradient1\"\r\n                            x1=\"0.99\" \r\n                            y1=\"0\" \r\n                            x2=\"1\"\r\n                            y2=\"0\"\r\n                        >\r\n                            <stop className=\"stopRed\" offset=\"0\" />\r\n                            <stop className=\"stopYellow\" offset=\"1\" />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <rect \r\n                        id=\"rect1\" \r\n                        x=\"0\" \r\n                        y=\"0\" \r\n                        rx=\"1\" \r\n                        ry=\"1\" \r\n                        width=\"300\" \r\n                        height=\"300\"\r\n                        fill=\"url(#Gradient1)\"\r\n                    />\r\n                </svg>\r\n            </div>           \r\n        )\r\n    }\r\n\r\n    return (\r\n         <>\r\n            {a()}\r\n         </>\r\n    );\r\n};\r\n\r\n\r\nexport default TestArea;","C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\Hupu.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\IlotulitusRaketti.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\layout\\planeetat\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\index.js",["544","545","546"],"import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {animate, liikuta} from \"../../reducers/gravitationReducer\";\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport {D3Gravity} from \"./D3Gravity\";\r\n\r\n\r\nconst SolarSystem = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null);\r\n\r\n    const {preview, data, height, isActive, width} = useSelector(state => state.gravitation);\r\n\r\n    /*\r\n     * d3 -komponentin alustus\r\n     */\r\n    const initVis = () => {\r\n        \r\n        visFunction.current = D3Gravity()\r\n            .height(height)\r\n            .width(width)\r\n            .preview(preview)\r\n            .data(data)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n            \r\n    }\r\n\r\n    /*\r\n     * D3 -komponentin päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        visFunction.current\r\n            .preview(preview)\r\n            .data(data)\r\n            \r\n    }\r\n\r\n\r\n    /*\r\n     *\r\n     \r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            if(visFunction.current !== null)\r\n                console.log(\"Aika päivittää esikatselu\")\r\n\r\n        }\r\n        \r\n    }, [preview])\r\n    */\r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            console.log(\"Aika päivittää data\")\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n            else\r\n                updateVis()\r\n\r\n        }\r\n        \r\n    }, [data, preview])\r\n\r\n\r\n\r\n    /*\r\n     * Animaation hallinta\r\n     * - tarkkaillaan isActive -muuttujan tilaa\r\n     * - aina kun tila muuttuu, ajetaan animate -kutsu, jonka toiminta\r\n     *   riippuu siitä onko isActive -muuttujan tila true vai false\r\n     */\r\n    useEffect(() => {\r\n\r\n        dispatch(animate())\r\n\r\n        return () => {\r\n            console.log('isActive cleanup')\r\n        }\r\n\r\n    }, [isActive])\r\n\r\n\r\n    /*\r\n, margin: \"auto\", maxWidth:\"600px\"\r\n     */\r\n    return (\r\n        <>\r\n            <svg ref={refElement} id=\"mainSVG\"></svg>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SolarSystem;","C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\D3Gravity.js",["547","548","549"],"import * as d3 from \"d3\";\r\nimport { \r\n    select\r\n} from \"d3\";\r\nimport gravitationReducer from \"../../reducers/gravitationReducer\";\r\n\r\nexport const D3Gravity = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n    let previewElem;\r\n\r\n    let circles;\r\nlet previewDots; \r\n\r\n    let data = [];\r\n    let preview = []\r\n\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updatePreview;\r\n    let updateWidth;\r\n\r\n    const drawPlanets = () => {\r\n \r\n        circles = gElem\r\n            .selectAll(\".planets > circle\")\r\n            .data(data)\r\n\r\n        circles\r\n                .attr(\"cx\", d => d.getVector().getX())\r\n                .attr(\"cy\", d => d.getVector().getY())\r\n        \r\n        circles\r\n            .enter()\r\n            .append(\"circle\")\r\n                .style(\"stroke\", \"none\")\r\n                .style(\"fill\", d => d.getColor())\r\n                .attr(\"r\", d => d.getRadius())\r\n                .attr(\"cx\", d => d.getVector().getX())\r\n                .attr(\"cy\", d => d.getVector().getY());\r\n\r\n    }\r\n\r\n    const drawPreviewDots = () => {\r\n\r\n        var t = d3.transition()\r\n            .duration(750)\r\n            .ease(d3.easeLinear);\r\n\r\n        previewDots = previewElem\r\n            .selectAll(\".preview > circle\")\r\n            .data(preview);\r\n\r\n        previewDots\r\n            .transition(t)\r\n                .attr(\"cx\", d => d.x)\r\n                .attr(\"cy\", d => d.y)\r\n\r\n        previewDots\r\n            .enter()\r\n            .append(\"circle\")\r\n                .style(\"stroke\", \"none\")\r\n                .style(\"fill\", d => d.color)\r\n                .attr(\"r\", 2)\r\n                .attr(\"cx\", d => d.x)\r\n                .attr(\"cy\", d => d.y)\r\n\r\n    }\r\n\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            svg = d3\r\n                .select(this)\r\n                //.append('svg')\r\n                .attr(\"viewBox\", [-width, -height, 3 * width, 3 * height])\r\n                //.attr(\"viewBox\", [0,0, width, height])\r\n\r\n            /*\r\n             * Planeettojen kiertoratojen esikatselu pisteille omistettu kerros\r\n             */\r\n            previewElem = svg\r\n                .append('g')\r\n                .classed(\"preview\", true)\r\n                .attr('transform', ` translate(${width/2},${height/2})`);\r\n\r\n            drawPreviewDots();\r\n\r\n            /*\r\n             * Planeetat\r\n             */\r\n            gElem = svg\r\n                .append('g')\r\n                .classed(\"planets\", true)\r\n                .attr('transform', ` translate(${width/2},${height/2})`);\r\n\r\n            drawPlanets();\r\n\r\n\r\n            updateData = function() {\r\n                drawPlanets();\r\n            }\r\n\r\n            updateHeight = function() {}\r\n\r\n            updatePreview = function() {\r\n               drawPreviewDots();                       \r\n            }\r\n\r\n\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    /*\r\n     * Asetetaan / päivitetään planeettojen ratojen esikatselunäkymä\r\n     *\r\n     *  \r\n     */\r\n    chart.preview = function(val){\r\n\r\n        if(!arguments.length) return preview;\r\n\r\n        preview = val;\r\n\r\n        if(typeof updatePreview === 'function')\r\n            updatePreview();\r\n\r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updataWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\reducers\\gravitationReducer.js",["550","551"],"import {CelestialBody, Vector} from \"../services/vector\";\r\n\r\nimport {Caleuche, Saffar, Sun} from \"../iconComponents/Planets\";\r\n\r\n/*\r\n* Format number to always show 2 decimal places\r\n* - https://stackoverflow.com/questions/6134039/format-number-to-always-show-2-decimal-places\r\n*/\r\nconst roundTo = (num) => (Math.round(num * 100) / 100).toFixed(0);\r\n\r\nfunction getRandomColor() {\r\n\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n\r\nconst celestialBodies = [\r\n    {x: 0,y: 0,speed: 0, direction: 0, radius: 20, name: \"Eridanus\", icon: <Sun />, massMin: 5000, mass: 20000, massMax: 50000, color:\"#f7e617\"},\r\n    {x: 200,y: 0,speedMin: 2, speed: 10, speedMax: 20, directionMin: -Math.PI, direction: -Math.PI / 2, directionMax: Math.PI, radius: 5, name: \"Saffar\", icon: <Saffar />, mass: 5, color: \"#3f67cb\"},\r\n    {x: 250,y: 0,speedMin: 2, speed: 20, speedMax: 30, directionMin: -Math.PI, direction: -Math.PI /3, directionMax: Math.PI,  radius: 10, name: \"Caleuche\", icon: <Caleuche />, mass: 10, color: \"#ff2211\"}\r\n]\r\n\r\nconst getInitialHeight = () => 500\r\nconst getInitialNumberOfPreviewSteps= () => 500\r\nconst getInitialWidth = () => 600\r\n\r\n/* \r\n * Alustetaan taivaankappaleita mallintavat objektit\r\n */\r\nconst getData = (cBodies) => {\r\n\r\n    let val = [];\r\n\r\n    for (const cb of cBodies){\r\n        val.push(new CelestialBody(cb.x, cb.y, cb.speed, cb.direction, cb.radius, cb.name, cb.mass, cb.color));\r\n    }\r\n\r\n    return val;\r\n}\r\n\r\n/*\r\n * Lasketaan \"esikatselukuva\" planeettojen liikeradoista valituilla parametrien arvoilla\r\n */\r\nconst getPreviewData = (data, depth) => {\r\n\r\n    let sun = data.filter(d => d.getName() === \"Eridanus\");\r\n    let planets =  data.filter(d => d.getName() !== \"Eridanus\");\r\n\r\n    let track = []; // Väliaikainen varasto, johon sijainnit talletetaan\r\n    let preview = []\r\n\r\n    /*\r\n     * Vaihe 1:\r\n     * - rekursiivisesti lasketaan planeettojen liikerataa eteenpäin\r\n     */\r\n    recursive(1, planets);\r\n\r\n    function recursive(n, _planets){\r\n\r\n        let updatedPlanets = _planets.map(cb => cb.update(sun[0]));\r\n        track.push(updatedPlanets);\r\n\r\n        if(n < depth)\r\n            recursive(n+1, updatedPlanets)\r\n    }\r\n\r\n    /*\r\n     * Vaihe 2:\r\n     * - edellinen vaihe tuottaa joukon eri kohdissa sijaitsevia taivaankappaleita\r\n     * - esikatseluun tarvitaan vain koordinaattitietoa, joten napataan nämä\r\n     *   palautettavaan taulukkoon\r\n     */\r\n    let i = 0;\r\n    for (const step of track){\r\n        for(const particle of step){\r\n\r\n            let pos = particle.getVector();\r\n\r\n            if(i % 5 === 0){\r\n                preview.push({\r\n                    x: pos.getX(),\r\n                    y: pos.getY(),\r\n                    color: particle.getColor()\r\n                })\r\n            }\r\n        }\r\n\r\n        i++;\r\n    }\r\n\r\n    return preview;\r\n\r\n}\r\n\r\n\r\n\r\nconst initialState = {\r\n\r\n    data: getData(celestialBodies),\r\n    celestialBodies: celestialBodies,\r\n    isActive: false,\r\n    height: getInitialHeight(),\r\n    width: getInitialWidth(),\r\n    preview: getPreviewData(getData(celestialBodies), getInitialNumberOfPreviewSteps())\r\n}\r\n\r\n\r\n/*\r\n * R E A C T I O N S   T O W A R D S    A C T I O N S\r\n */\r\n\r\nconst calculateNewState = (state) => {\r\n\r\n    let sun = state.data.filter(d => d.getName() === \"Eridanus\");\r\n    let planets =  state.data.filter(d => d.getName() !== \"Eridanus\");\r\n\r\n    let updatedPlanets = planets.map(cb => cb.update(sun[0]))\r\n\r\n    let newData = sun.concat(updatedPlanets)\r\n    \r\n    return {\r\n        ...state,\r\n        data: newData\r\n    }\r\n}\r\n\r\n/*\r\n * Päivitetään taivaankappaleiden asetuksia\r\n\r\n                name: param.name,\r\n                setting: param.setting,\r\n                value: param.value\r\n\r\n */\r\nconst changeCBSettings = (state, data) => {\r\n\r\n    let oldCBValues = state.celestialBodies;\r\n\r\n    let updatedCBValues = oldCBValues.map(cb => {\r\n\r\n        let a = {\r\n            ...cb\r\n        }\r\n\r\n        if(a.name === data.name) {\r\n\r\n            a[data.setting] = data.value\r\n\r\n            if(a.name === \"Eridanus\"){\r\n a['radius'] = roundTo(data.value/1000);\r\n            }\r\n        }\r\n\r\n        return a;\r\n    })\r\n\r\n    let updatedData = getData(updatedCBValues);\r\n    let updatedPreview = getPreviewData(getData(updatedCBValues), getInitialNumberOfPreviewSteps())\r\n\r\n    return {\r\n        ...state,\r\n        data: updatedData,\r\n        preview: updatedPreview,\r\n        celestialBodies: updatedCBValues\r\n    }\r\n}\r\n\r\n/* \r\n * A C T I O N S\r\n */\r\nexport const animate = () => {\r\n\r\n    return (dispatch, state) => {\r\n\r\n        /*\r\n         * Napataan ajastimen id talteen, jotta sille voidaan antaa pysäytyskäsky\r\n         */\r\n        let intervalId;\r\n\r\n        /*\r\n         * Voidaanko animaatio käynnistää?\r\n         * - ei liity ajastimeen, vaan siihen onko käyttäjä käynnistänyt toiminnon\r\n         * \r\n         * TÄHÄN PARAMETRI!!!!\r\n         */\r\nlet isActive = state().gravitation.isActive;\r\n\r\n        /*\r\n         * Onko ajastin päällä.\r\n         * - animaation sujuvuuden kannalta aikaisempi kierros pitää tarvittaessa keskeyttää?\r\n         */\r\n        let timerRunning = state().timer.running;\r\n        let timerId = state().timer.id;\r\n\r\n        if(timerRunning) {\r\n            clearInterval(timerId);\r\n            dispatch({type: 'TIMER_CLEAR'});\r\n        }\r\n\r\n        if(isActive){\r\n\r\n            intervalId = setInterval(() => {\r\n\r\n                dispatch({\r\n                    type: 'GRAVITY_ANIMATE',\r\n                    data: {}\r\n                })\r\n    \r\n            }, 25)\r\n\r\n            // kirjataan timerin käynnistys muistiin\r\n            dispatch({\r\n                type: 'TIMER_START',\r\n                data: {\r\n                    id: intervalId\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const liikuta = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'GRAVITY_ANIMATE',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Kytketään animaation käynnistävä muuttuja joko päälle tai pois päältä\r\n * - muuttuja: isActive\r\n */\r\nexport const toggleActiveState = () => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'GRAVITY_TOGGLE_ACTIVE',\r\n            data: {}\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateCelestialBodySettings = (param) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'GRAVITY_UPDATE_CB_SETTINGS',\r\n            data: {\r\n                name: param.name,\r\n                setting: param.setting,\r\n                value: param.value\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nconst gravitationReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case 'GRAVITY_ANIMATE':\r\n\r\n            return calculateNewState(state);\r\n\r\n        case 'GRAVITY_TOGGLE_ACTIVE':\r\n\r\n            const newActiveState = !state.isActive;\r\n\r\n            return {\r\n                ...state,\r\n                isActive: newActiveState\r\n            }\r\n\r\n        case 'GRAVITY_UPDATE_CB_SETTINGS':\r\n\r\n            return changeCBSettings(state, action.data);\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default gravitationReducer;","C:\\Users\\raimo\\Documents\\math\\src\\components\\navbar\\index.js",["552"],"C:\\Users\\raimo\\Documents\\math\\src\\reducers\\navigationReducer.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\toolbar.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\debugControls.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\meterPanel.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\gauge\\index.js",["553","554","555"],"import React, {useEffect, useRef, useState} from 'react';\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport {D3Compass} from \"./d3Compass\"\r\n\r\nimport './gauge.css'\r\n\r\n/*\r\n * \r\n */\r\nconst Compass = () => {\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null);\r\n\r\n    const [data, setData] = useState([0])\r\n    const [height, setHeight] = useState(150)\r\n    const [width, setWidth] = useState(150)\r\n\r\n    const initVis = () => {\r\n\r\n        visFunction.current = D3Compass()\r\n            .data(data)\r\n            .height(height)\r\n            .width(width)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n    }\r\n\r\n    /*\r\n     * D3 -komponentin päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        visFunction.current\r\n            .data(data)\r\n            \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n            \r\n            else \r\n                updateVis()\r\n        \r\n        }\r\n        \r\n    }, [data])\r\n\r\n    let handleChange = (event) => {\r\n        setData([event.target.value])\r\n    }\r\n\r\n\r\n\r\n    /*\r\n<input type=\"range\" min=\"0\" max=\"360\" value=\"0\" id=\"slider\" oninput=\"updateAngle(this.value)\">\r\n     */\r\n    return (\r\n        <>\r\n            <input \r\n                type=\"range\" \r\n                min=\"0\" \r\n                max=\"360\" \r\n                value={data[0]}\r\n                onChange={handleChange}\r\n            />\r\n            <div ref={refElement} style={{maxWidth: \"500px\", margin: \"10px 10px\"}}>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Compass;",["556","557"],"C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\gauge\\d3Compass.js",["558","559","560","561"],"import * as d3 from \"d3\";\r\n\r\n/*\r\n * http://bl.ocks.org/msqr/3202712\r\n */\r\nexport const D3Compass = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n    let arcs;\r\n    let lg;\r\n    let pg;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let arc;\r\n\r\n    let labelInset = 10;\r\n\r\n    let maxAngle = 360;    // Piirretään koko kehä\r\n    let minAngle = 0;\r\n\r\n    let maxValue;           // Kehän tekstien määrittämisen apuna...\r\n    let minValue = 0;\r\n\r\n    let needlePath;\r\n\r\n\r\n    let r;\r\n    let range;\r\n    let ringInset\r\n    let ringWidth;\r\n    let scale; // a linear scale that maps domain values to a percent from 0..1\r\n\r\n\r\n\tlet ticks;\r\n    let tickData;\r\n    let tickLabels = [\"N\",\"E\",\"S\",\"w\"];\r\n    let transitionMs = 4000;\r\n\r\n\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n    /*\r\n     * range = config.maxAngle - config.minAngle;\r\n     */\r\n    let configure = () => {\r\n\r\n        let majorTicks = tickLabels.length;\r\n\r\n        range = maxAngle - minAngle;\r\n\r\n        // Ympyrän kehä\r\n        r = Math.floor(Math.min(width, height) * 0.8) / 2;\r\n        ringInset = Math.floor(Math.min(width, height) * 0.1);\r\n        ringWidth =  Math.floor(Math.min(width, height) * 0.06);\r\n\r\n        // Kompassinuoli\r\n        let arrowWHalf =  Math.floor(Math.min(width, height) * 0.03);\r\n        let arrowLen =  Math.floor(Math.min(width, height) * 0.20)\r\n        needlePath = `M 0,0 L 0,-${arrowWHalf} L ${arrowLen},0 L 0,${arrowWHalf} Z`\r\n\r\n        console.log(\"wid\", width)\r\n\r\n        // a linear scale that maps domain values to a percent from 0..1\r\n        maxValue = majorTicks - 1\r\n        let ylaraja = maxValue / (maxValue + 1)\r\n        scale = d3.scaleLinear()\r\n            .range([0, ylaraja])\r\n            .domain([minValue, maxValue])\r\n\r\n        ticks = scale.ticks(majorTicks);\r\n\r\n        tickData = d3.range(majorTicks)\r\n            .map(function() {\r\n                return 1/majorTicks;\r\n            });\r\n\r\n\r\n        arc = d3\r\n            .arc()\r\n            .innerRadius(r - ringWidth - ringInset)\r\n            .outerRadius(r - ringInset)\r\n            .startAngle(function(d, i) {\r\n\t\t\t\tvar ratio = d * i;\r\n\t\t\t\treturn deg2rad(minAngle + (ratio * range));\r\n\t\t\t})\r\n\t\t\t.endAngle(function(d, i) {\r\n\t\t\t\tvar ratio = d * (i+1);\r\n\t\t\t\treturn deg2rad(minAngle + (ratio * range));\r\n            });\r\n            \r\n\r\n    }\r\n\r\n    let deg2rad = (deg) => {\r\n\t\treturn deg * Math.PI / 180;\r\n    }\r\n    \r\n    /*\r\n     * How can I draw compass shape in d3.js and colour each triangle differently?\r\n     * https://stackoverflow.com/questions/56716395/how-can-i-draw-compass-shape-in-d3-js-and-colour-each-triangle-differently\r\n     */\r\n    let drawNeedle = (value) => {\r\n\r\n        let angle = parseInt(value);\r\n\r\n        let data = [\r\n            { angle: angle, color: 'black'}, \r\n            { angle: (180 + angle) % 360, color: 'red'}\r\n        ];\r\n\r\n        let paths = pg\r\n            .selectAll('path')\r\n            .data(data);\r\n\r\n        paths\r\n            .enter()\r\n            .append('path')\r\n                .attr('d', needlePath)\r\n            .merge(paths)\r\n                .style('fill', d => d.color)\r\n                .attr('transform', d => `rotate(${d.angle})`);\r\n\r\n        paths.exit().remove();\r\n\r\n    }\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            configure();\r\n\r\n            svg = d3\r\n                .select(this)\r\n                .append('svg')\r\n                .attr(\"viewBox\", [0,0, width, height])\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform', \"translate(\" + ((width) / 2) + \", \" + ((height) / 2) + \")\");\r\n\r\n            arcs = gElem\r\n                .append('g')\r\n                .selectAll('path')\r\n                .data(tickData)\r\n                .enter()\r\n                .append('path')\r\n                    .attr('fill', function(d, i) {\r\n                        return i % 2 == 0 ? \"navy\" : \"red\"\r\n                    })\r\n                    .attr('d', arc);\r\n\r\n            lg = gElem\r\n                .append('g')\r\n                    .attr('class', 'label');\r\n\r\n            lg\r\n                .selectAll('text')\r\n\t\t\t\t.data(ticks)\r\n                .enter()\r\n                .append('text')\r\n                    .attr('transform', function(d, i) {\r\n\r\n                        var ratio = scale(d);\r\n                        var newAngle = minAngle + (ratio * range);\r\n\r\n                        return `rotate(${newAngle}) translate(0, ${labelInset - r})`;\r\n                    })\r\n                .text((d, i) => tickLabels[i]);\r\n\r\n            // - kompassineula\r\n            pg = gElem.append('g');\r\n            drawNeedle(0)\r\n\r\n            updateData = function() {\r\n                drawNeedle(data[0])\r\n            }\r\n\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updataWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\compass.js",["562"],"import React, {useEffect, useRef} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport {D3Compass} from \"../../d3Components/gauge/d3Compass\";\r\n\r\nconst Compass = () => {\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null);\r\n\r\n    const visHeight = 150;\r\n    const visWidth = 150;\r\n\r\n    /*\r\nfunction radians_to_degrees(radians)\r\n{\r\n  var pi = Math.PI;\r\n  return radians * (180/pi);\r\n}\r\n\r\n    */\r\n\r\n    const {rotation} = useSelector(state => {\r\n\r\n        return {\r\n            rotation: state.acceleration.data[0].getRotation() * (180 / Math.PI)\r\n        }\r\n        \r\n    })\r\n\r\n    const initVis = () => {\r\n\r\n        visFunction.current = D3Compass()\r\n            .data([rotation])\r\n            .height(visHeight)\r\n            .width(visWidth)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n    }\r\n\r\n\r\n    /*\r\n     * D3 -komponentin päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        visFunction.current\r\n            .data([rotation])\r\n            \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(visFunction.current === null)\r\n            initVis()\r\n        else \r\n            updateVis()\r\n        \r\n    \r\n        \r\n    }, [rotation])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div ref={refElement} style={{maxWidth: \"500px\", margin: \"10px 10px\"}}>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Compass;","C:\\Users\\raimo\\Documents\\math\\src\\components\\acceleration\\settingsPanel.js",["563","564"],"import React  from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport styled from 'styled-components';\r\n\r\nimport {updateStepValue} from \"../../reducers/advAccelerationReducer\";\r\n\r\nimport Slider from \"../../styledComponents/slider/\"\r\n\r\nimport './acceleration.css';\r\n\r\nconst SettingsPanel = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {step} = useSelector(state => state.acceleration);\r\n\r\n    let handleStepChange = (event) => {\r\n        //dispatch(updateStepValue({stepValue: parseInt(event.target.value)}))\r\n        //setValue(parseInt(event.target.value))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Slider\r\n                changeHandler = {(value) => {\r\n                    dispatch(updateStepValue({stepValue: parseFloat(value)}))\r\n                }}\r\n                color=\"#0074D9\"\r\n                step={step.step}\r\n                minValue = {step.min}\r\n                value = {step.val}\r\n                maxValue = {step.max}\r\n                name = \"Step\"\r\n                id = \"step\"\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SettingsPanel;","C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\slider\\index.js",["565","566","567","568"],"import React, {useEffect, useRef, useState} from 'react';\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport {D3Slider} from \"./d3Slider\"\r\n\r\nimport './slider.css'\r\n\r\n\r\nconst Slider = () => {\r\n\r\n    const [data, setData] = useState([0, 0.005, 0.01, 0.015, 0.02, 0.025])\r\n    const [height, setHeight] = useState(200)\r\n    const [width, setWidth] = useState(300)   \r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null);\r\n\r\n\r\n    const initVis = () => {\r\n\r\n        visFunction.current = D3Slider()\r\n            .data(data)\r\n            .height(height)\r\n            .width(width)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n    }\r\n\r\n    /*\r\n     * D3 -komponentin päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        visFunction.current\r\n            .data(data)\r\n            \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n            \r\n            else \r\n                updateVis()\r\n        \r\n        }\r\n        \r\n    }, [data])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div ref={refElement} style={{maxWidth: \"500px\", margin: \"10px 10px\"}}>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Slider;",["569","570"],"C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\slider\\d3Slider.js",["571"],"import * as d3 from \"d3\";\r\n\r\n/*\r\n * https://bl.ocks.org/johnwalley/e1d256b81e51da68f7feb632a53c3518\r\n */\r\nexport const D3Slider = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let xTranslate = 0;\r\n    let yTranslate = 0;\r\n\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *<circle cx=\"150\" cy=\"100\" r=\"80\" fill=\"green\" />\r\n\r\n  <text x=\"150\" y=\"125\" font-size=\"60\" text-anchor=\"middle\" fill=\"white\">SVG</text>\r\n         */\r\n        selection.each(function(){\r\n\r\n            svg = d3\r\n                .select(this)\r\n                .append('svg')\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height)\r\n                //.attr(\"viewBox\", [0,0, width, height])\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform',`translate(${xTranslate},${yTranslate})`);\r\n\r\n            gElem\r\n                .append('rect')\r\n                    .attr(\"x\",0)\r\n                    .attr(\"y\",0)\r\n                    .attr(\"width\",\"100%\")\r\n                    .attr(\"height\", \"100%\")\r\n                    .attr(\"fill\", \"red\")\r\n\r\n            gElem\r\n                .append('circle')\r\n                    .attr(\"cx\",150)\r\n                    .attr(\"cy\",100)\r\n                    .attr(\"r\",80)\r\n                    .attr(\"fill\", \"green\")\r\n\r\n\r\n            gElem\r\n                .append('text')\r\n                    .attr(\"x\",150)\r\n                    .attr(\"y\",125)\r\n                    .attr(\"font-size\",\"60\")\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"fill\", \"white\")\r\n                    .text(\"SVG\");\r\n\r\n\r\n            updateData = function() {\r\n                console.log(\"Päivitä  hyvä mies\")\r\n            }\r\n\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updataWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\slider\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\hooks\\useKonamiCode.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\toolbar.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\settingsPanel.js",["572","573","574"],"import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {\r\n    setAnimationType,\r\n    setAllowedRangeHeight, \r\n    setAllowedRangeWidth,\r\n    setNumberOfParticles\r\n} from \"../../reducers/vectorReducer\";\r\n\r\nimport Slider from \"../../styledComponents/slider/\";\r\nimport NumberInput from \"../../styledComponents/NumberInput\";\r\nimport Toggle from \"../../styledComponents/Toggle\";\r\nimport RadioGroup from \"../../styledComponents/RadioGroup\";\r\n\r\nconst SettingsPanel = () => {\r\n\r\n    const [isToggled, setIsToggled] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /*\r\n     *\r\n     */\r\n    const {\r\n        allowedRangeHeight,\r\n        allowedRangeWidth,\r\n        animation, // Aktiivinen vaihtoehto\r\n        animationTypes,\r\n        numberOfParticles, \r\n        maxAllowedRangeHeight,\r\n        minAllowedRangeHeight,\r\n        maxAllowedRangeWidth,\r\n        minAllowedRangeWidth,\r\n        minNumberOfParticles,\r\n        maxNumberOfParticles\r\n    } = useSelector(state => {\r\n\r\n        let maxAllowedRangeWidth = state.vector.width * 0.9;\r\n        let minAllowedRangeWidth = state.vector.width * 0.5;\r\n\r\n        let maxAllowedRangeHeight = state.vector.height * 0.9;\r\n        let minAllowedRangeHeight = state.vector.height * 0.5;\r\n\r\n        return {\r\n            ...state.vector,\r\n            maxAllowedRangeHeight: maxAllowedRangeHeight,\r\n            minAllowedRangeHeight: minAllowedRangeHeight,\r\n            maxAllowedRangeWidth: maxAllowedRangeWidth,\r\n            minAllowedRangeWidth: minAllowedRangeWidth,\r\n        }\r\n    });\r\n\r\n    const changeHandler = (val) => {\r\n        dispatch(setAnimationType(val))\r\n    }\r\n\r\n    /*\r\n            <Toggle \r\n                isToggled={isToggled}\r\n                onToggle={changeHandler}\r\n            />\r\n     */\r\n    const animationType = () => {\r\n\r\n        const values = Object.entries(animationTypes)\r\n            .map(([key, value]) => {\r\n\r\n                let active = value.value === animation.value;\r\n                return {\r\n                    isActive: active,\r\n                    name: value.name,\r\n                    value: value.value\r\n                }\r\n            });\r\n\r\n        return (\r\n            <RadioGroup \r\n                title=\"Type of Animation\"\r\n                options={values}\r\n                changeHandler={changeHandler}\r\n            />\r\n        )\r\n    }\r\n\r\n    /*\r\n     *\r\n     */\r\n    const particleCount = () => {\r\n\r\n        return(\r\n            <NumberInput \r\n                title=\"Number of particles\"\r\n                id=\"numberOfParticles\"\r\n                changeHandler={(value) => dispatch(setNumberOfParticles(value))}\r\n                value = {numberOfParticles}\r\n                min = {minNumberOfParticles}\r\n                max = {maxNumberOfParticles}\r\n            />\r\n        )\r\n\r\n    }\r\n\r\n    /*\r\n     * Partikkeleille sallitun alueen leveyden säätö\r\n     */\r\n    const rangeHeight = () => {\r\n        return (\r\n            <>\r\n                <Slider\r\n                    changeHandler = {(value) => {\r\n                        dispatch(setAllowedRangeHeight(parseInt(value)))\r\n                    }}\r\n                    color=\"#0074D9\"\r\n                    step={10}\r\n                    minValue = {minAllowedRangeHeight}\r\n                    value = {allowedRangeHeight}\r\n                    maxValue = {maxAllowedRangeHeight}\r\n                    name = \"Height\"\r\n                    id = \"height\"\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n    /*\r\n     * Partikkeleille sallitun alueen leveyden säätö\r\n     */\r\n    const rangeWidth = () => {\r\n        return (\r\n            <>\r\n                <Slider\r\n                    changeHandler = {(value) => {\r\n                        dispatch(setAllowedRangeWidth(parseInt(value)))\r\n                    }}\r\n                    color=\"#d5ad00\"\r\n                    step={10}\r\n                    minValue = {minAllowedRangeWidth}\r\n                    value = {allowedRangeWidth}\r\n                    maxValue = {maxAllowedRangeWidth}\r\n                    name = \"Width\"\r\n                    id = \"width\"\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {animationType()}\r\n            {particleCount()}\r\n            {rangeWidth()}\r\n            {rangeHeight()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SettingsPanel;","C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\meterPanel.js",["575","576","577"],"import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport './vectorPhysics.css';\r\n\r\n/* \r\n * What html markups to use for displaying label/value data?\r\n * https://stackoverflow.com/questions/1687733/what-html-markups-to-use-for-displaying-label-value-data\r\n */\r\nconst MeterPanel = () => {\r\n\r\n    const {data} = useSelector(state => state.vector)\r\n\r\n    return (\r\n        <dl>\r\n            <dt>Active Particles</dt>\r\n            <dd>{data.length}</dd>\r\n        </dl>\r\n    );\r\n};\r\n\r\nexport default MeterPanel;","C:\\Users\\raimo\\Documents\\math\\src\\components\\toolbarHolder\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\toolbarHolder\\toolbarGroub.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\NumberInput\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\NumberInput\\inputElements.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Toggle\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Toggle\\inputElements.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\RadioGroup\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\RadioGroup\\inputElements.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\vectorPhysics\\debugControls.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Icons\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\toolbar.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\DegubControls.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\gravity\\settings.js",["578"],"import React from 'react';\r\n\r\nimport Tabs from \"../../styledComponents/Tabs\"\r\nimport SunFun from \"../../iconComponents/SunFun\"\r\n\r\nconst Settings = () => {\r\n\r\n    /*\r\n     *<Tabs />\r\n     */\r\n    return (\r\n        <>\r\n            <Tabs />\r\n        </>\r\n        \r\n    );\r\n};\r\n\r\nexport default Settings;","C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Tabs\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Tabs\\elements.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\styledComponents\\Tabs\\tab.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\svgElements\\caleuche.js",[],["579","580"],"C:\\Users\\raimo\\Documents\\math\\src\\components\\svgElements\\saffar.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\svgElements\\spe.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\Cloud.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\Icon.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\FunFun.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\Planets.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\NoFun.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\iconComponents\\SunFun.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\index.js",["581","582","583"],"import React, {useEffect, useRef, useState} from 'react';\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {\r\n    animate\r\n} from \"../../reducers/bouncingReducer\";\r\n\r\nimport {D3Bouncing} from \"./D3Bouncing\";\r\nimport {select} from \"d3\";\r\n\r\nlet vis = null;\r\n\r\n/*\r\n * https://dev.to/emmaadesile/build-a-timer-using-react-hooks-3he2\r\n */\r\nconst Bouncer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const refElement = useRef(null);\r\n\r\n    const {datum, height, isActive, width } = useSelector(state => {\r\n        return {\r\n            ...state.bouncing\r\n        }\r\n    })\r\n\r\n    const initVis = () => {\r\n\r\n        vis = D3Bouncing()\r\n            .data(datum)\r\n            .height(height)\r\n            .width(width)\r\n\r\n        select(refElement.current)\r\n            .call(vis)\r\n\r\n        \r\n    }\r\n\r\n    const updateVis = () => {\r\n\r\n        vis.data(datum)\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(vis === null)\r\n            initVis()\r\n        else\r\n            updateVis()\r\n        \r\n    }, [datum])\r\n\r\n\r\n    /*\r\n     * Pyöritää animointia....\r\n     */\r\n    useEffect(() => {\r\n\r\n        dispatch(animate())\r\n\r\n    },[isActive])\r\n    \r\n    return (\r\n       <>\r\n        <div ref={refElement} className=\"trig-container\"></div>\t \r\n       </>      \r\n    );\r\n}\r\n\r\nexport default Bouncer;","C:\\Users\\raimo\\Documents\\math\\src\\layout\\bouncing\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\toolbar.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\controls.js",["584","585"],"import React from 'react';\r\n\r\nimport {Play, Step, Stop} from \"../../styledComponents/Icons\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {\r\n    animate, \r\n    stopAnimation, \r\n    toggleActiveState,\r\n    oneStepForward\r\n} from \"../../reducers/bouncingReducer\";\r\n\r\nconst Controls = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {isActive } = useSelector(state => {\r\n\r\n        return {\r\n            ...state.bouncing\r\n        }\r\n\r\n    })\r\n\r\n    const stepHandler = () => {\r\n        if(!isActive){\r\n            dispatch(oneStepForward())\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isActive\r\n                ? <Stop clickHandler = {() => dispatch(toggleActiveState())} />\r\n                : <Play clickHandler = {() => dispatch(toggleActiveState())} />\r\n            }\r\n            <Step \r\n                 clickHandler = {stepHandler}\r\n                 accessible = { isActive ? 0 : 1}           \r\n            />\r\n        </>\r\n    );\r\n\r\n\r\n/*\r\n        <>\r\n            {\r\n                isActive\r\n                ? <Stop clickHandler = {() => dispatch(toggleActiveState())} />\r\n                : <Play clickHandler = {() => dispatch(toggleActiveState())} />\r\n            }\r\n            <Step \r\n                clickHandler = {stepHandler}\r\n                accessible = { isActive ? 0 : 1}\r\n            />\r\n        </>\r\n\r\n*/\r\n};\r\n\r\nexport default Controls;","C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\settings.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\bouncer\\D3Bouncing.js",["586","587","588","589","590","591"],"import * as d3 from \"d3\";\r\nimport { \r\n    select \r\n} from \"d3\";\r\n\r\nexport const D3Bouncing = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n    let circle;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let centerX = 0\r\n    let centerY = 0\r\n\r\n\r\n    let count = 0;\r\n    let offset;\r\n    let speed = 0.1;\r\n    let angle = 0;\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            svg = d3\r\n                .select(this)\r\n                .append('svg')\r\n                .attr(\"viewBox\", [0,0, width, height])\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform', ` translate(${width/2},${height/2})`)\r\n\r\n            circle = gElem\r\n                .selectAll(\"circle\")\r\n                .data([data])\r\n                .enter()\r\n                .append(\"circle\")\r\n                    .attr(\"cy\", d => d.getVector().getY())\r\n                    .attr(\"cx\", d => d.getVector().getX())\r\n                    .attr(\"r\", d => d.getRadius())\r\n                    .attr(\"fill\", d => d.getColor())\r\n            \r\n            updateData = function() {\r\n\r\n                circle = gElem\r\n                    .selectAll(\"circle\")\r\n                    .data([data])\r\n\r\n                circle\r\n                    .attr(\"cy\", d => d.getVector().getY())\r\n                    .attr(\"cx\", d => d.getVector().getX())\r\n                    .attr(\"fill\", d => d.getColor())\r\n                    \r\n            }\r\n\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.centerX = function(val){\r\n\r\n        if(!arguments.length) return centerX;\r\n\r\n        centerX = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.centerY = function(val){\r\n\r\n        if(!arguments.length) return centerY;\r\n\r\n        centerY = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updataWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\components\\navbar\\responsiveNavBar.js",["592"],"import React from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\n\r\nimport {\r\n    toggleActiveState\r\n} from \"../../reducers/navigationReducer\"\r\n \r\nimport {\r\n    NAV,\r\n    UL,\r\n    LI,\r\n    LINK,\r\n    ICON,\r\n    BARS\r\n} from \"./elements\"\r\nimport { format } from 'd3-format';\r\n\r\nconst ResponsiveNavBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {pages} = useSelector(state => state.navigation);\r\n\r\n    return (\r\n        <NAV>\r\n            <UL className=\"menu\">\r\n\r\n\r\n                {\r\n                    pages.map((item, index) => {\r\n                        return (\r\n                            <LI key={index} className={item.cName}>\r\n                                <LINK to={item.path}>\r\n                                    <span className=\"navbar-span\">\r\n                                        {item.title}\r\n                                    </span>\r\n                                </LINK>\r\n                            </LI>\r\n                        )\r\n                    })\r\n                }\r\n\r\n                <LI className=\"toggle\">\r\n                    <ICON\r\n                        onClick={() => dispatch(toggleActiveState())}\r\n                    >\r\n                        <BARS />\r\n                    </ICON>\r\n                </LI>\r\n\r\n            </UL>\r\n        </NAV>\r\n    );\r\n};\r\n\r\nexport default ResponsiveNavBar;","C:\\Users\\raimo\\Documents\\math\\src\\components\\navbar\\elements.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\SvgIcon.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\reducers\\fractalReducer.js",["593","594"],"import { compose } from \"redux\";\r\n\r\nconst P0 = {\"x\":50, \"y\":135};\r\nconst P1 = {\"x\":450,\"y\":135};\r\nconst P2 = {\"x\":250,\"y\":481};\r\n\r\nconst K0 =  {\"x\":250, \"y\":450};\r\nconst K1 =  {\"x\":250, \"y\":50};\r\n\r\nconst PYTH1 = {\"x\":250, \"y\":450};\r\n\r\n/*\r\n */\r\nconst PATTERN = {\r\n    SIERPINSKI :{\r\n        name: 'Sierpinski',\r\n        value: 'sierpinski',\r\n        description: 'Sierpinski triangle',\r\n        lineType: 'polygon',\r\n        settings: {\r\n            numberOfIterations: {\r\n                min: 0,\r\n                value: 3,\r\n                max: 6,\r\n                tool: \"NumberInput\",\r\n                step: null,\r\n                name: \"Number of iterations\"\r\n            }            \r\n        },\r\n        setup: function(s) {\r\n            return getSierpinskiData(s)\r\n        }\r\n    },\r\n    KOCH: {\r\n        name: 'Koch',\r\n        value: 'koch',\r\n        description: 'Koch snowflake',\r\n        lineType: 'polygon',\r\n        settings: {\r\n            numberOfIterations: {\r\n                min: 0,\r\n                value: 2,\r\n                max: 8,\r\n                tool: \"NumberInput\",\r\n                step: null,\r\n                name: \"Number of iterations\"\r\n            }            \r\n        },\r\n        setup: function(s) {\r\n            return getKochData(s)\r\n        }\r\n    },\r\n    TREE: {\r\n        name: 'Fractal Tree',\r\n        value: 'tree',\r\n        description: 'Fractal tree',\r\n        lineType: 'path',\r\n        settings: {\r\n            branchAngleA: {\r\n                min: -Math.PI / 2,\r\n                value: -1*Math.PI/4,\r\n                max: Math.PI / 2,\r\n                tool: \"Slider\",\r\n                step: 0.1,\r\n                name: \"Branch Angle A\"\r\n            },\r\n            branchAngleB: {\r\n                min: -Math.PI / 2,\r\n                value: 1*Math.PI/3,\r\n                max: Math.PI / 2,\r\n                tool: \"Slider\",\r\n                step: 0.1,\r\n                name: \"Branch Angle B\"\r\n            },\r\n            numberOfIterations: {\r\n                min: 0,\r\n                value: 4,\r\n                max: 8,\r\n                tool: \"NumberInput\",\r\n                step: null,\r\n                name: \"Number of iterations\"\r\n            },\r\n            trunkRatio: {\r\n                min: 0.1,\r\n                value: 0.5,\r\n                max: 0.9,\r\n                tool: \"Slider\",\r\n                step: 0.1,\r\n                name: \"Trunk ratio\"\r\n            },         \r\n        },\r\n        setup: function(s) {\r\n            return getTreeData(s)\r\n        }\r\n    }, \r\n    PYTHAGOREAN: {\r\n        name: 'Pythagorean Tree',\r\n        value: 'Pythagorean',\r\n        description: 'Pythagorean Fractal tree',\r\n        lineType: 'path',\r\n        settings: {\r\n            alpha: {\r\n                min: -1 * Math.PI,\r\n                value: -1*Math.PI/6,\r\n                max: 1 * Math.PI,\r\n                tool: \"Slider\",\r\n                step: 0.1,\r\n                name: \"Alpha\"\r\n            },\r\n            beta: {\r\n                min: 0,\r\n                value: Math.PI/2.9,\r\n                max: Math.PI/2,\r\n                tool: \"Slider\",\r\n                step: 0.1,\r\n                name: \"Beta\"\r\n            },\r\n            numberOfIterations: {\r\n                min: 0,\r\n                value: 3,\r\n                max: 8,\r\n                tool: \"NumberInput\",\r\n                step: null,\r\n                name: \"Number of iterations\"\r\n            },\r\n            size: {\r\n                min: 10,\r\n                value: 60,\r\n                max: 200,\r\n                tool: \"NumberInput\",\r\n                step: null,\r\n                name: \"Size\"\r\n            }\r\n        },\r\n        setup: function(s) {\r\n            return getPythagoreanData(s)\r\n        }\r\n    }\r\n}/*\r\n * Alustetaan aineisto valitun animaation mukaisilla partikkeleilla\r\n *\r\n * @param aType minkä tyyppinen animaatio halutaan esittää\r\n * @param n montako partikkelia alustetaan\r\n */\r\nconst getData = (aType) => aType.setup(aType.settings);\r\n\r\nconst getInitialAnimationType = () => PATTERN.PYTHAGOREAN;\r\n\r\nconst getInitialNumberOfIterations = () => 1\r\n\r\n/*\r\n * Muodostetaan pisteistä tulostettava objekti\r\n */\r\nconst getTriangle = (p0, p1, p2, layer) => {\r\n\r\n    return {\r\n        points: [{x: p0.x, y: p0.y}, {x: p1.x, y: p1.y}, {x: p2.x, y: p2.y}],\r\n        className: layer === 1 ? `triangle last_iteration` : `triangle`\r\n    }\r\n}\r\n\r\nconst drawRectangle = (corner, size) => {\r\n\r\n    let points = [];\r\n\r\n    points.push({x: corner.x,y: corner.y});    \r\n    points.push({x: corner.x + size,y: corner.y});\r\n    points.push({x: corner.x + size,y: corner.y - size});\r\n    points.push({x: corner.x,y: corner.y - size});\r\n\r\n    return points;\r\n\r\n}\r\n\r\nconst drawRectangleL = (corner, size) => {\r\n\r\n    let points = [];\r\n\r\n    points.push({x: corner.x,y: corner.y});    \r\n    points.push({x: corner.x - size,y: corner.y});\r\n    points.push({x: corner.x - size,y: corner.y - size});\r\n    points.push({x: corner.x,y: corner.y - size});\r\n\r\n    return points;\r\n\r\n}\r\n\r\n/*\r\n * Laskettavan kolmion hypotenuusan päätepisteet tiedetään jo. \r\n * Em. iso kolmio voidaan jakaa kahteen pienee suorakulmaiseen kolmioon,\r\n * joiden hypotenuusat \"ison kolmio\" kannat muodostavat.\r\n * \r\n * @param beta laskettavan kolmio pistettä a vastaava kulma\r\n * @param a kolmion hypotenuustan kärkipiste, johon laskenta ja piirto perustuu\r\n * @param b kolmion hypotenuusan päätepiste, käytetään sellaisenaan..\r\n * @param alpha hypotenuusan kulma suhteessa x-akseliin\r\n */\r\nconst drawTriangle = (beta, a, b) => {\r\n\r\n//console.log(\"corner\", a.x, a.y)\r\n\r\n    let dx = b.x - a.x;\r\n    let dy = b.y - a.y;\r\n\r\n    // Kuinka paljon kanta on kääntynyt origon suhteen\r\n    let theta = Math.atan2(dy, dx)\r\n//console.log(dx, dy, theta, (theta * 180 / Math.PI))\r\n\r\n    let size = Math.sqrt(dx*dx + dy*dy);\r\n//console.log(\"si\", size)\r\n\r\n    // - lasketaan beta -kulmaa vastaavan kolmion hypotenuusa\r\n    let hDot = size * Math.cos(beta)\r\n//console.log(\"hDot\", hDot)\r\n\r\n    // - lasketaan beta-kulmaa vastaavan pikkukolmion kateettien pituudet\r\n    let xDot = hDot * Math.cos(beta)\r\n    let yDot = hDot * Math.sin(beta)\r\n\r\n//console.log(\"xDot, yDot\", xDot, yDot)\r\n\r\n    // - kääntöä edeltävät x ja y -koordinaatit\r\n    let cDotX =  a.x + xDot;\r\n    let cDotY =  a.y + yDot;\r\n\r\n//console.log(\"cDotX, cDotY\", cDotX, cDotY)\r\n\r\n\r\n    let rotated = rotateClockwise({\r\n        x: cDotX,\r\n        y: cDotY\r\n    }, a, theta);\r\n\r\n//console.log(\"rotated\", rotated)\r\n\r\n    return [\r\n        a,\r\n        b,\r\n        rotated\r\n    ]\r\n    \r\n}\r\n\r\n/*\r\n * Fraktaali Pythagoraan puu\r\n */ \r\nconst getPythagoreanData = (settings) => {\r\n\r\n    let squares = [];\r\n\r\n    let size = settings.size.value;\r\n    let alpha = settings.alpha.value;\r\n    let beta = -1*settings.beta.value;\r\n\r\n    let depth = settings.numberOfIterations.value\r\n\r\n    let points = drawRectangle(PYTH1, size)\r\n    points = rotate(alpha, points)\r\n    squares.push(points)\r\n//\r\n    let triAnglePoints = drawTriangle(beta, points[3], points[2])\r\n\r\n    if(depth > 0) {\r\n        leftBranch(triAnglePoints, squares, beta, depth)\r\n        rightBranch(triAnglePoints, squares, beta, depth)\r\n    }\r\n\r\n    return squares\r\n    \r\n}\r\n\r\n\r\nconst getAngleAndLength = (a, b) => {\r\n\r\n    let dy = b.y - a.y;\r\n    let dx = b.x - a.x;\r\n\r\n    //console.log(\"x a -> b\", dx)\r\n    //console.log(\"y a -> b\", dy)\r\n    //console.log(\"angle a -> b\", Math.atan2(dy,dx) * 360 / (2 * Math.PI))\r\n\r\n    return {\r\n        angle: Math.atan2(dy,dx),\r\n        length: Math.sqrt(dy*dy + dx*dx)\r\n    }\r\n}\r\n\r\n/* \r\n * Lasketaan parametrin välittämää syvyttä vastaavan Sierpinskin kolmion pisteet\r\n */\r\nconst getSierpinskiData = (settings) => {\r\n\r\n    let triangles = [];\r\n\r\n    // Pohjalle tuleva kolmio\r\n    triangles.push(getTriangle(P0, P1, P2, 0));\r\n\r\n    // Mahdolliset sisäkkäiset kolmiot\r\n    sierpinski(triangles, P0, P1, P2, settings.numberOfIterations.value);\r\n\r\n    return triangles\r\n}\r\n\r\n/*\r\n *\r\n */ \r\nconst getTreeData = (settings) => {\r\n\r\n    let points = [];\r\n\r\n    tree(\r\n        points, \r\n        K0, \r\n        K1, \r\n        settings.numberOfIterations.value, \r\n        settings.trunkRatio.value, \r\n        settings.branchAngleA.value, \r\n        settings.branchAngleB.value\r\n    )\r\n\r\n    return points;\r\n}\r\n\r\n/*\r\n * Mikäli syvyys on 0, tulostetaan lähtötilanne, eli peruskolmio\r\n */\r\nconst getKochData = (settings) => {\r\n\r\n    let polylines = [];\r\n\r\n    let depth = settings.numberOfIterations.value\r\n\r\n    if(depth === 0) {\r\n        // Pohjalle tuleva kolmio\r\n        polylines.push(getTriangle(P0, P1, P2, 0));    \r\n        return polylines\r\n    } else {\r\n        koch(polylines, P0, P1, depth);\r\n        koch(polylines, P1, P2, depth);\r\n        koch(polylines, P2, P0, depth);\r\n    }\r\n\r\n    return [{points: polylines, className: \"koch\"}]\r\n}\r\n\r\n\r\n\r\nconst koch = (polylines, p0, p1, limit) => {\r\n\r\n    let dx = p1.x - p0.x;\r\n    let dy = p1.y - p0.y;\r\n    let dist = Math.sqrt(dx*dx + dy*dy);\r\n    let unit = dist / 3;\r\n\r\n    // Angle between points p1 and p0\r\n    let angle = Math.atan2(dy, dx);\r\n\r\n    let pA = {\r\n        x: p0.x + dx / 3,\r\n        y: p0.y + dy / 3\r\n    }\r\n\r\n    let pC = {\r\n        x: p1.x - dx / 3,\r\n        y: p1.y - dy / 3\r\n    }\r\n\r\n    let pB = {\r\n        x: pA.x + Math.cos(angle - Math.PI / 3) * unit,\r\n        y: pA.y + Math.sin(angle - Math.PI / 3) * unit\r\n    }\r\n\r\n    if(limit > 1){\r\n        koch(polylines, p0, pA, limit-1);\r\n        koch(polylines, pA, pB, limit-1);\r\n        koch(polylines, pB, pC, limit-1);\r\n        koch(polylines, pC, p1, limit-1)\r\n    } else {\r\n\r\n        if(polylines.length === 0)\r\n            polylines.push({x: p0.x, y: p0.y})\r\n\r\n        polylines.push({x: p0.x, y: p0.y})\r\n        polylines.push({x: pA.x, y: pA.y})\r\n        polylines.push({x: pB.x, y: pB.y})\r\n        polylines.push({x: pC.x, y: pC.y})\r\n        polylines.push({x: p1.x, y: p1.y})\r\n    }\r\n\r\n}\r\n\r\n\r\nconst leftBranch = (triAnglePoints, arr, beta, depth) => {\r\n\r\n    depth = depth - 1\r\n\r\n    let aEtL = getAngleAndLength(triAnglePoints[0], triAnglePoints[2])\r\n\r\n    let points2 = drawRectangle(triAnglePoints[0], aEtL.length)\r\n    points2 = rotate(aEtL.angle, points2)\r\n\r\n    arr.push(points2)\r\n\r\n    if(depth > 0) {\r\n        let triAnglePointsL = drawTriangle(beta, points2[3], points2[2])\r\n        leftBranch(triAnglePointsL, arr, beta, depth)\r\n\r\n        rightBranch(triAnglePointsL, arr, beta, depth)\r\n        \r\n    }\r\n\r\n}\r\n\r\n/*\r\n * Lasketaan minimi ja maksimiarvon välille osuva satunnaisluku\r\n */\r\nconst randomRange = (min, max) => {\r\n    return min + Math.random() * (max - min)\r\n}\r\n\r\nconst rightBranch = (triAnglePoints, arr, beta, depth) => {\r\n\r\n    depth = depth - 1\r\n\r\n    let aEtL2 = getAngleAndLength(triAnglePoints[1], triAnglePoints[2])\r\n\r\n    let points3 = drawRectangle(triAnglePoints[2], aEtL2.length)\r\n    points3 = rotate((Math.PI + aEtL2.angle), points3)\r\n    arr.push(points3)\r\n    \r\n\r\n    if(depth > 0) {\r\n        let triAnglePointsR = drawTriangle((beta), points3[3], points3[2])\r\n        rightBranch(triAnglePointsR, arr, beta, depth)\r\n\r\n        leftBranch(triAnglePointsR, arr, beta, depth)\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n * Käännetään objektia\r\n * - kääntö objektin ensimmäisen pisteen suhteen\r\n *\r\n * param @item käännettävä objekti\r\n */\r\nconst rotate = (angle, item) => {\r\n\r\n\r\n    let rotatedItem = item.map((d) => {\r\n\r\n        let rotatedPoint = rotateClockwise(d, item[0], angle);\r\n\r\n        return {\r\n            x: rotatedPoint.x,\r\n            y: rotatedPoint.y\r\n        };\r\n    })\r\n\r\n    return rotatedItem\r\n\r\n}\r\n\r\n\r\n/*\r\n * \r\n */\r\nlet rotateClockwise = (point, pivotPoint, angle) => {\r\n\r\n    // Siirto origoon\r\n    let x = point.x - pivotPoint.x;\r\n    let y = point.y - pivotPoint.y;\r\n\r\n    // Kääntö ja palautus origon suhteen\r\n    let transX = (x * Math.cos(angle) - y * Math.sin(angle)) + pivotPoint.x;\r\n    let transY = (x * Math.sin(angle) + y * Math.cos(angle)) + pivotPoint.y;\r\n\r\n    return {\r\n        x: transX,\r\n        y: transY\r\n    }\r\n\r\n}\r\n\r\n/* \r\n *  Päivitetään fraktaalin piirtämisessä käytettävää muuttujaa\r\n */\r\nconst setParameterValue = (state, data) => {\r\n\r\n    let newSettings = updateSetting(data.param, data.value, state.animation.settings)\r\n\r\n    // - päivitetään aktiivisen animaation ominaisuudet\r\n    let actAnimation = {\r\n        ...state.animation,\r\n        settings: newSettings\r\n    }\r\n\r\n    // - päivitetään myös valittavana olevat vaihtoehdot sisältävä\r\n    let newAnimationTypes = updateAnimationTypes(actAnimation, state.animationTypes);\r\n\r\n    // - päivittään fraktaali \r\n    let newData = getData(actAnimation);\r\n\r\n    return {\r\n        ...state,\r\n        animation: actAnimation,\r\n        animationTypes: newAnimationTypes,\r\n        data: newData,\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * Sierpinskin kolmion pisteiden laskenta.\r\n * - jaetaan parametrien välittämien pisteiden p0, p1 ja p2 muodostama kolmio\r\n *   kolmeen sisäkkäiseen kolmioon. \r\n * - sisäkkäiset kolmiot muodostetaan puolittmalla alkuperäisen kolmion kateetit\r\n */\r\nconst sierpinski = (triangles, p0, p1, p2, limit) => {\r\n\r\n    if(limit >= 1) {\r\n\r\n        /*\r\n         * Lasketaan kateettien keskipisteet\r\n         */\r\n\r\n        let pA = {\r\n            x: (p0.x + p1.x) / 2,\r\n            y: (p0.y + p1.y) / 2,\r\n        },\r\n        pB = {\r\n            x: (p1.x + p2.x) / 2,\r\n            y: (p1.y + p2.y) / 2,\r\n        },\r\n        pC = {\r\n            x: (p2.x + p0.x) / 2,\r\n            y: (p2.y + p0.y) / 2,\r\n        }\r\n    \r\n        /*\r\n         * Muodosteteaan pikkukolmiot\r\n         */\r\n        triangles.push(getTriangle(p0, pA, pC, limit));\r\n        triangles.push(getTriangle(pA, p1, pB, limit));\r\n        triangles.push(getTriangle(pC, pB, p2, limit));\r\n\r\n\r\n        /*\r\n         * Seuraavan tason laskenta\r\n         */\r\n        sierpinski(triangles, p0, pA, pC, limit - 1);\r\n        sierpinski(triangles, pA, p1, pB, limit - 1);\r\n        sierpinski(triangles, pC, pB, p2, limit - 1);\r\n\r\n    }\r\n\r\n}\r\n\r\nconst tree = (points, p0, p1, limit, trunkRatio, branchAngleA, branchAngleB) => {\r\n\r\n    let dx = p1.x - p0.x;\r\n    let dy = p1.y - p0.y;\r\n\r\n    let dist = Math.sqrt(dx * dx + dy * dy);\r\n    let angle = Math.atan2(dy, dx);\r\n\r\n    let branchLength = dist * (1 - trunkRatio)\r\n\r\n    let pA = {\r\n        x: p0.x + dx * trunkRatio,\r\n        y: p0.y + dy * trunkRatio\r\n    }\r\n\r\n    let pB = {\r\n        x: pA.x + Math.cos(angle + branchAngleA) * branchLength,\r\n        y: pA.y + Math.sin(angle + branchAngleA) * branchLength\r\n    }\r\n\r\n    let pC = {\r\n        x: pA.x + Math.cos(angle - branchAngleB) * branchLength,\r\n        y: pA.y + Math.sin(angle - branchAngleB) * branchLength\r\n    }\r\n\r\n    /* - väli juuresta haarautumispisteeseen */\r\n    points.push([{x: p0.x, y: p0.y},{x: pA.x, y: pA.y}]) \r\n\r\n    /* \r\n     * joko lähdetään laskemaan uutta oksaa\r\n     * tai tai piirretään oksan muodostavat kolme pistettä\r\n     */\r\n    if(limit > 0) {\r\n        let updatedAngleA = branchAngleA + randomRange(-0.1,0.1)\r\n        let updatedAngleB = branchAngleB + randomRange(-0.1,0.1)\r\n\r\n        tree(points, pA, pC, limit-1, trunkRatio, updatedAngleA, updatedAngleB)\r\n        tree(points, pA, pB, limit-1, trunkRatio, updatedAngleA, updatedAngleB)\r\n    } else {\r\n        points.push([\r\n            {x: pB.x, y: pB.y},\r\n            {x: pA.x, y: pA.y},\r\n            {x: pC.x, y: pC.y}\r\n        ])\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n * Päivitetään käytettävissä olevat fraktaalivaihtoehdot kokoava objekti\r\n */\r\nconst updateAnimationTypes = (active, patterns) => {\r\n    \r\n    // - haetaan avain, jonka fraktaalin ominaisuudet on piilotettu \r\n    let key = Object.entries(patterns)\r\n        .filter(([k, props]) => {\r\n\r\n\r\n            return props.value === active.value\r\n        })[0][0];\r\n\r\n    return {\r\n        ...patterns,\r\n        [key]: active\r\n    }\r\n        \r\n}\r\n\r\n\r\n/*\r\n * Päivitetään tietyn asetuksista löytyvän paremetrin arvoa\r\n */\r\nconst updateSetting = (param, value, settings) => {\r\n\r\n    let clone = JSON.parse(JSON.stringify(settings))\r\n\r\n    let setting = Object.entries(clone)\r\n        .filter(([key, value]) => {\r\n            return key === param\r\n        })[0];\r\n\r\n    let key = setting[0]\r\n    let val = setting[1]\r\n    val.value = value\r\n\r\n    return {\r\n        ...clone,\r\n        [key]: val\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n */\r\nconst initialState = {\r\n    animation: getInitialAnimationType(),\r\n    animationTypes: PATTERN,\r\n    data: getData(getInitialAnimationType()),\r\n    iterations: getInitialNumberOfIterations(),\r\n    minNumberOfIterations: 0,\r\n    maxNumberOfIterations: 8,\r\n    height: 400,\r\n    isActive: false,\r\n    width: 600\r\n}\r\n\r\n/*\r\n * I M P L E M E N T I N G   A C T I O N S\r\n */\r\n/*\r\n * Asetetaan esitettävän animaation tyyppi\r\n * - vaihtoehtoina ovat Firework ja Fountain\r\n */\r\nconst changeFractalType = (state, data) => {\r\n\r\n    const newActive = Object.entries(state.animationTypes)\r\n        .filter(([key, value]) => {\r\n            return  value.value === data.type;\r\n        })[0][1];\r\n\r\n    let newData = getData(newActive)\r\n\r\n    return {\r\n        ...state,\r\n        animation: newActive,\r\n        data: newData\r\n    }\r\n}\r\n\r\n/*\r\n * Muutetaan iteraatioden lukumäärä\r\n *\r\n * @todo: poista\r\n */ \r\nconst changeIterationCount = (state, data) => {\r\n\r\n    console.log(data)\r\n\r\n    let newNOP = data.iterations;\r\n    let newData = getData(state.animation);\r\n\r\n    return {\r\n        ...state,\r\n        iterations: newNOP,\r\n        data: newData\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * A C T I O N S\r\n */\r\nexport const setFractalType = (val) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'FRACTAL_SET_FRACTAL_TYPE',\r\n            data: {\r\n                type: val\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Partikkeleille sallitun alueen korkeuden säätö\r\n */\r\nexport const setNumberOfIterations = (val) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'FRACTAL_SET_ITERATION_COUNT',\r\n            data: {\r\n                iterations: val\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/*\r\n * Fraktaalin laskemisessa käytettävän muuttujanarvon päivitys\r\n */\r\nexport const setParameter = (param, val) => {\r\n\r\n    return dispatch => {\r\n\r\n        dispatch({\r\n            type: 'FRACTAL_SET_PARAMETER',\r\n            data: {\r\n                param: param,\r\n                value: val\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nconst fractalReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case 'FRACTAL_SET_FRACTAL_TYPE':\r\n            return changeFractalType(state, action.data);\r\n\r\n        case 'FRACTAL_SET_ITERATION_COUNT':\r\n            return changeIterationCount(state, action.data);\r\n\r\n        case 'FRACTAL_SET_PARAMETER':\r\n            return setParameterValue(state, action.data);\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default fractalReducer;\r\n","C:\\Users\\raimo\\Documents\\math\\src\\layout\\fractal\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\index.js",["595","596"],"import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n//import {animate, liikuta} from \"../../reducers/gravitationReducer\";\r\n\r\nimport \"./fractal.css\"\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport {D3Fractal} from \"./d3Fractal\";\r\n\r\nconst Canvas = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null);\r\n\r\n    const {data, height, lineType, width} = useSelector(state => {\r\n\r\n        let fractal = state.fractal;\r\n\r\n        return {\r\n            data: fractal.data,\r\n            height: fractal.height,\r\n            lineType: fractal.animation.lineType,\r\n            width: fractal.width\r\n        }\r\n    });\r\n\r\n    /*\r\n     * d3 -komponentin alustus\r\n     */\r\n    const initVis = () => {\r\n        \r\n        visFunction.current = D3Fractal()\r\n            .height(height)\r\n            .width(width)\r\n            .linetype(lineType)\r\n            .data(data)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)   \r\n    }\r\n\r\n    /*\r\n     * D3 -komponentin päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        visFunction.current\r\n            .linetype(lineType)\r\n            .data(data)\r\n            \r\n            \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(visFunction.current === null)\r\n            initVis()\r\n        else\r\n            updateVis()\r\n        \r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n            <svg ref={refElement} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Canvas;","C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\toolbar.js",["597","598","599","600","601","602","603"],"import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {IoMdSettings} from \"react-icons/io\";\r\nimport {VscDashboard} from \"react-icons/vsc\";\r\nimport {VscDebug} from \"react-icons/vsc\";\r\n\r\nimport ToolbarGroub from \"../toolbarHolder/toolbarGroub\";\r\n\r\nimport MeterPanel from \"./meterPanel\";\r\nimport SettingsPanel from \"./settings\";\r\n// import SettingsPanel from \"./settingsPanel\";\r\n// import DebugControls from \"./debugControls\";\r\n\r\nconst Toolbar = () => {\r\n\r\n    const {data, height, isActive, width} = useSelector(state => state.fractal);\r\n\r\n    return (\r\n        <>\r\n\r\n            <ToolbarGroub\r\n                eventKey = \"0\"\r\n                title = \"Mittaristo\"\r\n                icon = {<VscDashboard />}\r\n            >\r\n                <MeterPanel />\r\n            </ToolbarGroub>\r\n\r\n            <ToolbarGroub\r\n                eventKey = \"1\"\r\n                title = \"Asetukset\"\r\n                icon = {<VscDashboard />}\r\n            >\r\n                <SettingsPanel />\r\n            </ToolbarGroub>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Toolbar;","C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\d3Fractal.js",["604","605","606"],"import * as d3 from \"d3\";\r\nimport { \r\n    select\r\n} from \"d3\";\r\n\r\n/*\r\n * http://bl.ocks.org/pstuffa/8e9e4218e19fee84638b\r\n */\r\nexport const D3Fractal = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\nlet fooElem;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let linetype = \"polygon\"\r\n\r\n    let lineGenerator;\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n    let updateLineType;\r\n\r\n    const initializeVars = () => {\r\n\r\n        lineGenerator = d3\r\n            .line()\r\n            .x(d => d.x)\r\n            .y(d => d.y)    \r\n    }\r\n\r\n    /*\r\n     *\r\n     */\r\n    const pointsToPolygon = (d) => {\r\n\r\n        let bar = d.map(point => `${point.x},${point.y}`)\r\n        return bar.join(\" \")\r\n    }\r\n\r\n\r\n    /*\r\n     * fractalTree\r\n     */\r\n    const fractalTree = () => {\r\n\r\n        clearCanvas()\r\n\r\n        gElem\r\n            .selectAll(\"path\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"path\")\r\n                .attr('d', d => {\r\n                    return lineGenerator(d)\r\n                })\r\n                .attr(\"class\", \"fractalTree\")\r\n            \r\n    }\r\n\r\n\r\n    const pGon = () => {\r\n\r\n        clearCanvas()\r\n\r\n        gElem\r\n            .selectAll(\"polygon\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"polygon\")\r\n                .attr(\"points\", d => pointsToPolygon(d.points))\r\n                //.attr(\"points\", d => pointsToPolygon(d))\r\n                //.attr(\"fill\", d => d.color)\r\n                .attr(\"class\", d => d.className)        \r\n    }\r\n\r\n    const clearCanvas = () => {\r\n\r\n        gElem\r\n            .selectAll(\"path\")\r\n            .remove()\r\n\r\n        gElem\r\n            .selectAll(\"polygon\")\r\n            .remove();\r\n\r\n    }\r\n\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            initializeVars()\r\n\r\n            svg = d3\r\n                .select(this)\r\n                //.append('svg')\r\n                .attr(\"viewBox\", [0,0, margin.left + width + margin.right, margin.top + height + margin.bottom])\r\n\r\n            /*\r\n             <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\"/>\r\n             */\r\n            svg \r\n                .append(\"rect\")\r\n                .attr(\"x\", 0)\r\n                .attr(\"y\", 0)\r\n                .attr(\"width\",\"100%\")\r\n                .attr(\"height\",\"100%\")\r\n\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n            fooElem = svg\r\n                .append('g')\r\n                .attr('transform', `translate(${margin.left},${margin.top})`)\r\n\r\n            \r\n\r\n            if(linetype === \"path\"){\r\n                fractalTree(); \r\n            }\r\n            else\r\n                pGon();\r\n\r\n\r\n            updateData = function() {\r\n\r\n                if(linetype === \"path\")\r\n                    fractalTree(); \r\n                else\r\n                    pGon();\r\n\r\n            }\r\n\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.linetype = function(val){\r\n\r\n        if(!arguments.length) return linetype;\r\n\r\n        linetype = val;\r\n   \r\n        return chart\r\n\r\n    } \r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updateWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\meterPanel.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\components\\fractal\\settings.js",["607","608","609","610"],"import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport RadioGroup from \"../../styledComponents/RadioGroup\";\r\nimport NumberInput from \"../../styledComponents/NumberInput\";\r\n\r\nimport {\r\n    setFractalType,\r\n    setNumberOfIterations,\r\n    setParameter\r\n} from '../../reducers/fractalReducer'\r\n\r\nimport Slider from \"../../styledComponents/slider/\";\r\n\r\nconst Settings = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    /*\r\n    *\r\n    */\r\n    const {\r\n        animation, \r\n        animationTypes,\r\n        iterations,\r\n        minNumberOfIterations,\r\n        maxNumberOfIterations\r\n    } = useSelector(state => state.fractal);\r\n\r\n    const changeHandler = (val) => {\r\n        dispatch(setFractalType(val))\r\n    }\r\n\r\n    const animationType = () => {\r\n\r\n        const values = Object.entries(animationTypes)\r\n            .map(([key, value]) => {\r\n\r\n                let active = value.value === animation.value;\r\n                return {\r\n                    isActive: active,\r\n                    name: value.name,\r\n                    value: value.value\r\n                }\r\n            });\r\n\r\n        return (\r\n            <RadioGroup \r\n                title=\"Type of Animation\"\r\n                options={values}\r\n                changeHandler={changeHandler}\r\n            />\r\n        )\r\n    }\r\n\r\n    /*\r\n     *\r\n     */\r\n    const iterationDepth = () => {\r\n\r\n        return(\r\n            <NumberInput \r\n                title=\"Number of iterations\"\r\n                id=\"numberOfIterations\"\r\n                changeHandler={(value) => dispatch(setNumberOfIterations(value))}\r\n                value = {iterations}\r\n                min = {minNumberOfIterations}\r\n                max = {maxNumberOfIterations}\r\n            />\r\n        )\r\n\r\n    }\r\n\r\n    /*\r\n    * Desimaalifunktion pyöristämisessä käyettävä apufunktio\r\n    *\r\n    * Lähde:\r\n    * ---------------------------------------------------------------------------------------------\r\n    * How do you round to 1 decimal place in Javascript?\r\n    * https://stackoverflow.com/questions/7342957/how-do-you-round-to-1-decimal-place-in-javascript\r\n    */\r\n    const round = (value, precision) => {\r\n        var multiplier = Math.pow(10, precision || 0);\r\n        return Math.round(value * multiplier) / multiplier;\r\n    }\r\n\r\n    /*\r\n     *\r\n     */\r\n    const setAlpha = () => {\r\n        return (\r\n            <>\r\n                <Slider\r\n                    changeHandler = {(value) => {\r\n                        dispatch(setParameter('alpha', parseFloat(value)))\r\n                    }}\r\n                    color=\"#0074D9\"\r\n                    step={0.1}\r\n                    minValue = {round(animation.settings.alpha.min,2)}\r\n                    value = {round(animation.settings.alpha.value,2)}\r\n                    maxValue = {round(animation.settings.alpha.max,2)}\r\n                    name = \"Alpha\"\r\n                    id = \"alpha\"\r\n                />\r\n            </>\r\n        )        \r\n    }\r\n\r\n    /*\r\n     *\r\n     */\r\n    const setBeta = () => {\r\n        return (\r\n            <>\r\n                <Slider\r\n                    changeHandler = {(value) => {\r\n                        dispatch(setParameter('beta', parseFloat(value)))\r\n                    }}\r\n                    color=\"#0074D9\"\r\n                    step={0.1}\r\n                    minValue = {round(animation.settings.beta.min,2)}\r\n                    value = {round(animation.settings.beta.value,2)}\r\n                    maxValue = {round(animation.settings.beta.max,2)}\r\n                    name = \"Beta\"\r\n                    id = \"beta\"\r\n                />\r\n            </>\r\n        )        \r\n    }\r\n\r\n    const sliderInput = (key, step, min, max, value, name) => {\r\n        return (\r\n            <Slider\r\n                changeHandler = {(value) => {\r\n                    dispatch(setParameter(key, parseFloat(value)))\r\n                }}\r\n                color=\"#0074D9\"\r\n                step={step}\r\n                minValue = {round(min,2)}\r\n                value = {round(value,2)}\r\n                maxValue = {round(max,2)}\r\n                name = {name}\r\n                id = {key}\r\n                key={key}\r\n            />\r\n        )        \r\n    }\r\n\r\n    const numberInput = (key, name, min, max, value) => {\r\n\r\n        return(\r\n            <NumberInput \r\n                title={name}\r\n                id={key}\r\n                changeHandler={(val) => dispatch(setParameter(key, parseInt(val)))}\r\n                value = {value}\r\n                min = {min}\r\n                max = {max}\r\n                key = {key}\r\n            />\r\n        )\r\n    \r\n    }\r\n\r\n    const printSettings = () => {\r\n\r\n        return(\r\n            Object.entries(animation.settings)\r\n            .map(([key, value]) => {\r\n\r\n                switch (value.tool) {\r\n\r\n                    case 'Slider':\r\n                        \r\n                        return sliderInput(\r\n                            key,\r\n                            value.step,\r\n                            value.min,\r\n                            value.max,\r\n                            value.value,\r\n                            value.name\r\n                        );\r\n\r\n                    case 'NumberInput':\r\n\r\n                        return numberInput(\r\n                            key,\r\n                            value.name,\r\n                            value.min,\r\n                            value.max,\r\n                            value.value\r\n                        )\r\n                \r\n                }\r\n            })  \r\n        );  \r\n\r\n    }\r\n\r\n    /*\r\n        {setAlpha()}\r\n        {setBeta()}\r\n        {iterationDepth()}\r\n\r\n    */\r\n    return (\r\n        <>\r\n            {animationType()}\r\n            {printSettings()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Settings;","C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\Hero.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\recursion\\index.js",["611","612","613","614","615","616","617","618","619","620"],"import React, {useEffect, useRef, useState} from 'react';\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport {d3Component} from \"./d3component\"\r\n\r\nimport './style.css'\r\n\r\nconst Recursion = () => {\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null);\r\n\r\n    const [data, setData] = useState(null)\r\n    const [height, setHeight] = useState(300)\r\n    const [width, setWidth] = useState(300)\r\n\r\n    const [stopOffset, setStopOffset] = useState(0.01)\r\n\r\n    const [count, setCount] = useState(0)\r\n\r\n    const [limit, setLimit] = useState({\r\n        x1: 0,\r\n        x2: 0\r\n    });\r\n\r\n    const [ready, setReady] = useState(false)\r\n    const [intervaId, setIntervaId] = useState(null)\r\n\r\n\r\n    const setupRose = () => {\r\n\r\n        let d = 2;\r\n        let n = 6;\r\n\r\n        let points = []\r\n\r\n        for(var a = 0; a < 4*Math.PI; a+=0.1){\r\n\r\n            let r = 150 * Math.cos((n/d) * a);\r\n            let x = r * Math.cos(a)\r\n            let y = r * Math.sin(a)\r\n\r\n            points.push({x: x,y: y})\r\n\r\n        }     \r\n        \r\n        setData(points)\r\n    }\r\n\r\n    const initVis = () => {\r\n\r\n        \r\n        visFunction.current = d3Component()\r\n            .data(data)\r\n            .height(height)\r\n            .gradient(stopOffset)\r\n            .width(width)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n            \r\n    }\r\n\r\n    /*\r\n     * D3 -komponentin päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        /*\r\n        visFunction.current\r\n            .data(data)\r\n            */\r\n            \r\n    }\r\n\r\n    const updateGradient = () => {\r\n\r\n        let newOffset = stopOffset+0.01<=1?stopOffset+0.01:0;\r\n        setStopOffset(newOffset)\r\n    }\r\n \r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n        \r\n        }\r\n        \r\n    }, [data])\r\n\r\n\r\n    let handleChange = (event) => {\r\n        setData([event.target.value])\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n        \r\n        }\r\n        \r\n    }, [data])\r\n\r\n    /*\r\n    useEffect(() => {\r\n\r\n        if(ready === true){\r\n            console.log(\"Voisi lopettaa\")\r\n            console.log(intervaId)\r\n        }\r\n        \r\n    }, [ready])\r\n    */\r\n\r\n    /*\r\n\r\n     */\r\n    useEffect(() => {\r\n\r\n        setupRose();\r\n\r\n        \r\n        const interval = setInterval(() => {\r\n\r\n            setLimit(l => {\r\n\r\n                let x1 = l.x1 + 0.05\r\n                let x2 = l.x2 + 0.02\r\n\r\n                if(x1 >= 1 && x2 >= 1)\r\n                    setReady(true)\r\n\r\n                return {\r\n                    x1: x1 <= 1?x1:1,\r\n                    x2: x1 <= 1\r\n                        ? 0\r\n                        : x2 <= 1 ? x2 : 1\r\n                }\r\n            });     \r\n\r\n\r\n        }, 25)\r\n\r\n        if(ready === true){\r\n            clearInterval(interval)\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(interval)\r\n        }\r\n        \r\n\r\n    }, [ready])\r\n\r\n\r\n    /*\r\n<input type=\"range\" min=\"0\" max=\"360\" value=\"0\" id=\"slider\" oninput=\"updateAngle(this.value)\">\r\n     */\r\n    return (\r\n        <>\r\n            <div style={{maxWidth: \"800px\", margin: \"10px 10px\"}}>\r\n                <svg ref={refElement}>\r\n                    <defs>\r\n                        <linearGradient \r\n                            id=\"Gradient1\"\r\n                            x1={limit.x1} \r\n                            y1=\"0\" \r\n                            x2={limit.x2} \r\n                            y2=\"0\"\r\n                        >\r\n                            <stop className=\"stop1\" offset=\"0\" />\r\n                            <stop className=\"stop2\" offset=\"1\" />\r\n                        </linearGradient>\r\n                    </defs>\r\n                </svg>\r\n            </div>\r\n            <button onClick={() => updateGradient() }>Tee Jotain</button>\r\n            <p>: {limit.x1}</p>\r\n            <p>: {limit.x2}</p>\r\n        </>\r\n    );    \r\n};\r\n\r\nexport default Recursion;","C:\\Users\\raimo\\Documents\\math\\src\\d3Components\\recursion\\d3component.js",["621","622","623","624","625"],"import * as d3 from \"d3\";\r\n\r\n/*\r\n * http://bl.ocks.org/msqr/3202712\r\n */\r\nexport const d3Component = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n    let gRect;\r\n\r\n    let defs;\r\n    let linearGradient;\r\n    let stopTwo;\r\n    let stopTwoOffset = 0;\r\n\r\n    let data = []\r\n    let width = 200;\r\n    let height = 200;\r\n    let margin = {top: 10, right: 10, bottom: 10, left: 10};\r\n\r\n    let updateData;\r\n    let updateGradient;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n\r\n    const drawCircle = (x, y, r) => {\r\n\r\n        if(r > 5) {\r\n            drawCircle(x + 1.2*r, y, r * 0.5)\r\n            drawCircle(x - 1.2*r, y, r * 0.5)\r\n            drawCircle(x, y + 1.2* r, r * 0.5)\r\n            drawCircle(x, y - 1.2* r, r * 0.5)\r\n        }\r\n\r\n    }\r\n\r\n    const drawRect = () => {\r\n\r\n        gRect\r\n            .selectAll(\"rect\")\r\n            .data([true])\r\n            .enter()\r\n            .append(\"rect\")\r\n                .style(\"fill\", \"url(#Gradient1)\")\r\n                .attr(\"x\", 0)\r\n                .attr(\"y\", 0)\r\n                .attr(\"width\", \"100%\")\r\n                .attr(\"height\", \"100%\")\r\n\r\n    }\r\n\r\n    /*\r\n     *\r\n     */\r\n    const drawRose = () => {\r\n\r\n        gElem\r\n            .selectAll(\"circle\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"circle\")\r\n                .style(\"stroke\", \"gray\")\r\n                .style(\"fill\", \"black\")\r\n                .attr(\"r\", 1)\r\n                .attr(\"cx\", d => d.x)\r\n                .attr(\"cy\", d => d.y);\r\n\r\n    }\r\n\r\n\r\n    function chart(selection){\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            svg = d3\r\n                .select(this)\r\n                //.append('svg')\r\n                .attr('class', 'rose')\r\n                .attr(\"viewBox\", [0,0, width, height])\r\n\r\n            //appendDef();\r\n\r\n            gRect = svg\r\n                .append('g');\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform', \"translate(\" + ((width) / 2) + \", \" + ((height) / 2) + \")\");\r\n\r\n\r\n            //drawCircle(0, 0, 60)\r\n            drawRect();\r\n            drawRose();\r\n\r\n            updateData = function() {}\r\n\r\n            updateGradient = function() {\r\n\r\n                console.log(\"Stoppi\", stopTwoOffset)\r\n            }\r\n\r\n\r\n            updateHeight = function() {}\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.gradient = function(val){\r\n\r\n        if(!arguments.length) return stopTwoOffset;\r\n\r\n        stopTwoOffset = val;\r\n\r\n        if(typeof updateGradient === 'function')\r\n            updateGradient();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updataWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\Front.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\layout\\landingPage\\Testi.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\index.js",["626","627","628"],"import React, {useEffect, useRef} from 'react';\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {select} from \"d3\";\r\n\r\nimport {\r\n    animate,\r\n    liikuta, \r\n    toggleActiveState\r\n} from \"./flockingReducer\"\r\nimport {d3Flocking} from \"./d3Flocking\"\r\n\r\nconst Flocking = () => {\r\n\r\n    const refElement = useRef(null);\r\n    const visFunction = useRef(null);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {activeBoid, data, height, isActive, perceptionRadius, width} = useSelector(state => {\r\n\r\n        // state.flocking\r\n        let flocking = state.flocking;\r\n\r\n        let activeBoid = flocking.data.filter(b => b.isUnderObservation())\r\n\r\n        return {\r\n            ...flocking,\r\n            activeBoid: activeBoid\r\n        }\r\n\r\n\r\n    });\r\n\r\n    /*\r\n     * D3 -grafiikan alustus\r\n     */\r\n    const initVis = () => {\r\n\r\n        //data.forEach(element => {\r\n        //    console.log(element.getVelocity().getX(), element.getVelocity().getY())\r\n        //});\r\n\r\n        visFunction.current = d3Flocking()\r\n            .data(data)\r\n            .height(height)\r\n            .width(width)\r\n            .perceptionRadius(perceptionRadius)\r\n            .activeBoid(activeBoid)\r\n\r\n        select(refElement.current)\r\n            .call(visFunction.current)\r\n            \r\n    }\r\n\r\n    /*\r\n     * D3-grafiikan (aineiston) päivitys\r\n     */\r\n    const updateVis = () => {\r\n\r\n        visFunction.current\r\n            .activeBoid(activeBoid)\r\n            .data(data)\r\n\r\n              \r\n    }\r\n\r\n    /*\r\n     * Animaation hallinta\r\n     * - tarkkaillaan isActive -muuttujan tilaa\r\n     * - aina kun tila muuttuu, ajetaan animate -kutsu, jonka toiminta\r\n     *   riippuu siitä onko isActive -muuttujan tila true vai false\r\n     */\r\n    useEffect(() => {\r\n\r\n        dispatch(animate(isActive))\r\n\r\n        return () => {\r\n            console.log('isActive cleanup')\r\n        }\r\n\r\n    }, [isActive])\r\n\r\n    useEffect(() => {\r\n\r\n        if(data && data.length){\r\n\r\n            if(visFunction.current === null)\r\n                initVis()\r\n            else\r\n                updateVis()\r\n\r\n        }\r\n\r\n\r\n        return () => {\r\n            console.log('data cleanup')\r\n        }\r\n        \r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n            <div ref={refElement} className=\"cm-FLOCKING-container\" style={{width: \"500px\", height: '500px'}}>\r\n            </div>\r\n            <button\r\n                onClick = {() => dispatch(liikuta())}\r\n            >\r\n                L\r\n            </button>\r\n            <button\r\n                onClick = {() => dispatch(toggleActiveState())}\r\n            >\r\n                {\r\n                    isActive?\"Sammuta\":\"Käynnistä\"\r\n                }\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Flocking;","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\d3Flocking.js",["629","630","631","632","633","634","635"],"import * as d3 from \"d3\";\r\nimport { \r\n    select\r\n} from \"d3\";\r\n\r\nexport const d3Flocking = () => {\r\n\r\n    let svg;\r\n    let gElem;\r\n\r\nlet circles;\r\n\r\n    let gBoids;\r\n    let boids;\r\n\r\nlet gVelocity;\r\nlet velocity;\r\n\r\nlet firstUpd = true;\r\nlet gVelocityUpd;\r\nlet velocityUpd;\r\n\r\nlet velocityLineScale = 5\r\n\r\n    let data = []\r\n\r\n    // \"Kankaan\" leveys ja korkeus\r\n    let width = 200;        \r\n    let height = 200;\r\n\r\n    // Vertailtavan objektin korostus\r\n    let perceptionRadius;\r\n    let perceptionCircle;\r\n    let gActiveBoid;\r\n    let activeBoid;\r\n\r\n    let updateData;\r\n    let updateHeight;\r\n    let updateWidth;\r\n\r\n\r\n    function chart(selection){\r\n\r\n\r\n        const displayPerceptionCircle = () => {\r\n\r\n            perceptionCircle = gActiveBoid\r\n                .selectAll(\"circle\")\r\n                .data(activeBoid)\r\n                .enter()\r\n                .append(\"circle\")\r\n                    .style(\"stroke\", \"gray\")\r\n                    .style(\"fill\", 'none')\r\n                    .attr(\"r\", perceptionRadius)\r\n                    .attr(\"cx\", d => {\r\n                        return d.getVector().getX()\r\n                    })\r\n                    .attr(\"cy\", d => d.getVector().getY())\r\n        }\r\n\r\n        const displayBoids = () => {\r\n\r\n            boids = gBoids\r\n                .selectAll(\"circle\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"circle\")\r\n                    .style(\"stroke\", \"gray\")\r\n                    .style(\"fill\", d => {\r\n                        //d.isUnderObservation() ? 'red' : 'black'\r\n                        return d.isUnderObservation()\r\n                            ? 'red'\r\n                            : d.isPerceived()\r\n                                ? 'yellow'\r\n                                : 'navy'\r\n                    })\r\n                    .attr(\"r\", d => d.getRadius())\r\n                    .attr(\"cx\", d => {\r\n                        return d.getVector().getX()\r\n                    })\r\n                    .attr(\"cy\", d => d.getVector().getY())\r\n        }\r\n\r\n\r\n        const displayOriginalVelocity = () => {\r\n\r\n            velocity = gVelocity\r\n                .selectAll(\"line\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"line\")\r\n                    .style(\"stroke\", \"rgb(255,0,0)\")\r\n                    .attr(\"x1\", d => d.getVector().getX())\r\n                    .attr(\"y1\", d => d.getVector().getY())\r\n                    .attr(\"x2\", d => {return d.getVector().getX() + (velocityLineScale * d.getVelocity().getX())})\r\n                    .attr(\"y2\", d => {\r\n//console.log(d.getId(), d.getVelocity().getLength())\r\n                        return d.getVector().getY() + (velocityLineScale * d.getVelocity().getY())\r\n                    })\r\n        }\r\n\r\n        const displayVelocity = () => {\r\n\r\n            velocityUpd = gVelocityUpd\r\n                .selectAll(\"line\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"line\")\r\n                    .style(\"stroke\", \"#0062cc\")\r\n                    .attr(\"x1\", d => d.getVector().getX())\r\n                    .attr(\"y1\", d => d.getVector().getY())\r\n                    .attr(\"x2\", d => {\r\n//console.log(d.getId(), d.getVelocity().getLength())\r\n                        return d.getVector().getX() + (velocityLineScale * d.getVelocity().getX())}\r\n                    )\r\n                    .attr(\"y2\", d => {return d.getVector().getY() + (velocityLineScale * d.getVelocity().getY())})\r\n        }\r\n\r\n        const updateBoids = () => {\r\n\r\n            boids\r\n                .data(data)\r\n                    .attr(\"cx\", d => d.getVector().getX())\r\n                    .attr(\"cy\", d => d.getVector().getY())\r\n                    .style(\"fill\", d => {\r\n                        return d.isUnderObservation()\r\n                            ? 'red'\r\n                            : d.isPerceived()\r\n                                ? 'yellow'\r\n                                : 'navy'\r\n                    })\r\n        }\r\n\r\n        const updatePerceptionCircle = () => {\r\n\r\n            perceptionCircle\r\n                .data(activeBoid)\r\n                    .attr(\"cx\", d => {\r\n                        return d.getVector().getX()\r\n                    })\r\n                    .attr(\"cy\", d => d.getVector().getY())\r\n        }\r\n\r\n        const updateVelocities = () => {\r\n\r\n            if(firstUpd){\r\n//console.log(\"Eka päivitys\")\r\n                firstUpd = false\r\n                displayVelocity()\r\n            } else {\r\n                velocityUpd\r\n                    .data(data)\r\n                        .attr(\"x1\", d => d.getVector().getX())\r\n                        .attr(\"y1\", d => d.getVector().getY())\r\n                        .attr(\"x2\", d => {\r\n//console.log(d.getId(), d.getVelocity().getLength())\r\n                            return d.getVector().getX() + (velocityLineScale * d.getVelocity().getX())}\r\n                        )\r\n                        .attr(\"y2\", d => {return d.getVector().getY() + (velocityLineScale * d.getVelocity().getY())})               \r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        /*\r\n         *\r\n         */\r\n        selection.each(function(){\r\n\r\n            svg = d3\r\n                .select(this)\r\n                .append('svg')\r\n                .attr(\"viewBox\", [0,0, width, height]);\r\n                    //.attr(\"width\", width)\r\n                    //.attr(\"height\", height);\r\n\r\n            gElem = svg\r\n                .append('g')\r\n                .attr('transform', ` translate(${width/2},${height/2})`)\r\n\r\n            gActiveBoid = gElem.append('g')\r\n            //if(activeBoid !== null)\r\n                //displayPerceptionCircle()\r\n\r\n            gBoids = gElem.append('g')\r\n                displayBoids();\r\n\r\n            gVelocity= gElem.append('g')\r\n                //displayOriginalVelocity()\r\n\r\n            gVelocityUpd =gElem.append('g')\r\n\r\n\r\n\r\n            updateData = function() {\r\n                //console.log(\"D3 PÄIVITYS\")\r\n\r\n                /*\r\n                \r\n                */\r\n                updateBoids()\r\n                //updatePerceptionCircle()\r\n                //updateVelocities()\r\n                \r\n            }\r\n\r\n            updateHeight = function() {}\r\n\r\n            updateWidth = function() {}\r\n\r\n        })\r\n    }\r\n\r\n\r\n    /*\r\n     * Vertailussa olevan havaitoympräristöä esittävän ympyrän säde \r\n     */\r\n    chart.activeBoid = function(val){\r\n\r\n        if(!arguments.length) return activeBoid;\r\n\r\n        activeBoid = val;\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n\r\n    chart.data = function(val){\r\n\r\n        if(!arguments.length) return data;\r\n\r\n        data = val;\r\n\r\n        if(typeof updateData === 'function')\r\n            updateData();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    chart.height = function(val){\r\n\r\n        if(!arguments.length) return height;\r\n\r\n        height = val;\r\n\r\n        if(typeof updateHeight === 'function')\r\n            updateHeight();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    /*\r\n     * Vertailussa olevan havaitoympräristöä esittävän ympyrän säde \r\n     */\r\n    chart.perceptionRadius = function(val){\r\n\r\n        if(!arguments.length) return perceptionRadius;\r\n\r\n        perceptionRadius = val;\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n    /*\r\n     * Animaation esittämiseen käytettävän SVG -elementin leveys\r\n     */ \r\n    chart.width = function(val){\r\n\r\n        if(!arguments.length) return width;\r\n\r\n        width = val;\r\n\r\n        if(typeof updateWidth === 'function')\r\n            updateWidth();\r\n   \r\n        return chart\r\n\r\n    }\r\n\r\n\r\n    return chart\r\n\r\n}","C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\flockingReducer.js",["636","637","638"],"C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\Vector.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\layout\\flocking\\index.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\toolbar.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\settings.js",[],"C:\\Users\\raimo\\Documents\\math\\src\\challenge\\flocking\\controls.js",[],{"ruleId":"639","replacedBy":"640"},{"ruleId":"641","replacedBy":"642"},{"ruleId":"643","severity":1,"message":"644","line":7,"column":3,"nodeType":"645","messageId":"646","endLine":7,"endColumn":7},{"ruleId":"643","severity":1,"message":"647","line":31,"column":8,"nodeType":"645","messageId":"646","endLine":31,"endColumn":21},{"ruleId":"643","severity":1,"message":"648","line":3,"column":9,"nodeType":"645","messageId":"646","endLine":3,"endColumn":27},{"ruleId":"643","severity":1,"message":"649","line":18,"column":19,"nodeType":"645","messageId":"646","endLine":18,"endColumn":28},{"ruleId":"643","severity":1,"message":"650","line":19,"column":18,"nodeType":"645","messageId":"646","endLine":19,"endColumn":26},{"ruleId":"651","severity":1,"message":"652","line":64,"column":8,"nodeType":"653","endLine":64,"endColumn":14,"suggestions":"654"},{"ruleId":"639","replacedBy":"655"},{"ruleId":"641","replacedBy":"656"},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"658","line":4,"column":5,"nodeType":"645","messageId":"646","endLine":4,"endColumn":8},{"ruleId":"643","severity":1,"message":"659","line":5,"column":5,"nodeType":"645","messageId":"646","endLine":5,"endColumn":8},{"ruleId":"643","severity":1,"message":"660","line":6,"column":5,"nodeType":"645","messageId":"646","endLine":6,"endColumn":11},{"ruleId":"643","severity":1,"message":"661","line":7,"column":5,"nodeType":"645","messageId":"646","endLine":7,"endColumn":16},{"ruleId":"643","severity":1,"message":"662","line":56,"column":9,"nodeType":"645","messageId":"646","endLine":56,"endColumn":13},{"ruleId":"651","severity":1,"message":"663","line":56,"column":8,"nodeType":"653","endLine":56,"endColumn":14,"suggestions":"664"},{"ruleId":"651","severity":1,"message":"665","line":62,"column":8,"nodeType":"653","endLine":62,"endColumn":18,"suggestions":"666"},{"ruleId":"643","severity":1,"message":"667","line":9,"column":7,"nodeType":"645","messageId":"646","endLine":9,"endColumn":14},{"ruleId":"643","severity":1,"message":"668","line":10,"column":7,"nodeType":"645","messageId":"646","endLine":10,"endColumn":14},{"ruleId":"643","severity":1,"message":"669","line":11,"column":7,"nodeType":"645","messageId":"646","endLine":11,"endColumn":15},{"ruleId":"643","severity":1,"message":"670","line":12,"column":7,"nodeType":"645","messageId":"646","endLine":12,"endColumn":15},{"ruleId":"643","severity":1,"message":"671","line":13,"column":7,"nodeType":"645","messageId":"646","endLine":13,"endColumn":14},{"ruleId":"643","severity":1,"message":"672","line":14,"column":7,"nodeType":"645","messageId":"646","endLine":14,"endColumn":14},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"673","line":15,"column":9,"nodeType":"645","messageId":"646","endLine":15,"endColumn":15},{"ruleId":"643","severity":1,"message":"674","line":16,"column":11,"nodeType":"645","messageId":"646","endLine":16,"endColumn":19},{"ruleId":"651","severity":1,"message":"663","line":49,"column":8,"nodeType":"653","endLine":49,"endColumn":14,"suggestions":"675"},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"673","line":19,"column":9,"nodeType":"645","messageId":"646","endLine":19,"endColumn":15},{"ruleId":"643","severity":1,"message":"676","line":63,"column":13,"nodeType":"645","messageId":"646","endLine":63,"endColumn":18},{"ruleId":"643","severity":1,"message":"677","line":4,"column":8,"nodeType":"645","messageId":"646","endLine":4,"endColumn":13},{"ruleId":"639","replacedBy":"678"},{"ruleId":"641","replacedBy":"679"},{"ruleId":"643","severity":1,"message":"680","line":3,"column":27,"nodeType":"645","messageId":"646","endLine":3,"endColumn":31},{"ruleId":"681","severity":1,"message":"682","line":19,"column":21,"nodeType":"683","endLine":19,"endColumn":59},{"ruleId":"681","severity":1,"message":"682","line":24,"column":21,"nodeType":"683","endLine":24,"endColumn":59},{"ruleId":"681","severity":1,"message":"682","line":29,"column":21,"nodeType":"683","endLine":29,"endColumn":59},{"ruleId":"681","severity":1,"message":"682","line":19,"column":21,"nodeType":"683","endLine":19,"endColumn":48},{"ruleId":"681","severity":1,"message":"682","line":26,"column":21,"nodeType":"683","endLine":26,"endColumn":48},{"ruleId":"681","severity":1,"message":"682","line":33,"column":21,"nodeType":"683","endLine":33,"endColumn":48},{"ruleId":"643","severity":1,"message":"684","line":1,"column":18,"nodeType":"645","messageId":"646","endLine":1,"endColumn":24},{"ruleId":"685","severity":1,"message":"686","line":103,"column":28,"nodeType":"687","messageId":"688","endLine":103,"endColumn":30},{"ruleId":"651","severity":1,"message":"689","line":111,"column":8,"nodeType":"653","endLine":111,"endColumn":14,"suggestions":"690"},{"ruleId":"651","severity":1,"message":"665","line":121,"column":8,"nodeType":"653","endLine":121,"endColumn":18,"suggestions":"691"},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"673","line":23,"column":9,"nodeType":"645","messageId":"646","endLine":23,"endColumn":15},{"ruleId":"643","severity":1,"message":"692","line":11,"column":5,"nodeType":"645","messageId":"646","endLine":11,"endColumn":16},{"ruleId":"643","severity":1,"message":"693","line":12,"column":5,"nodeType":"645","messageId":"646","endLine":12,"endColumn":16},{"ruleId":"643","severity":1,"message":"694","line":13,"column":5,"nodeType":"645","messageId":"646","endLine":13,"endColumn":12},{"ruleId":"651","severity":1,"message":"663","line":117,"column":8,"nodeType":"653","endLine":117,"endColumn":14,"suggestions":"695"},{"ruleId":"651","severity":1,"message":"665","line":123,"column":8,"nodeType":"653","endLine":123,"endColumn":18,"suggestions":"696"},{"ruleId":"643","severity":1,"message":"697","line":3,"column":10,"nodeType":"645","messageId":"646","endLine":3,"endColumn":24},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"698","line":5,"column":10,"nodeType":"645","messageId":"646","endLine":5,"endColumn":20},{"ruleId":"643","severity":1,"message":"673","line":21,"column":9,"nodeType":"645","messageId":"646","endLine":21,"endColumn":15},{"ruleId":"643","severity":1,"message":"676","line":100,"column":13,"nodeType":"645","messageId":"646","endLine":100,"endColumn":18},{"ruleId":"651","severity":1,"message":"699","line":38,"column":8,"nodeType":"653","endLine":38,"endColumn":19,"suggestions":"700"},{"ruleId":"643","severity":1,"message":"701","line":15,"column":11,"nodeType":"645","messageId":"646","endLine":15,"endColumn":12},{"ruleId":"643","severity":1,"message":"694","line":4,"column":18,"nodeType":"645","messageId":"646","endLine":4,"endColumn":25},{"ruleId":"651","severity":1,"message":"663","line":78,"column":8,"nodeType":"653","endLine":78,"endColumn":23,"suggestions":"702"},{"ruleId":"651","severity":1,"message":"665","line":96,"column":8,"nodeType":"653","endLine":96,"endColumn":18,"suggestions":"703"},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"704","line":5,"column":8,"nodeType":"645","messageId":"646","endLine":5,"endColumn":26},{"ruleId":"643","severity":1,"message":"673","line":21,"column":9,"nodeType":"645","messageId":"646","endLine":21,"endColumn":15},{"ruleId":"643","severity":1,"message":"684","line":1,"column":24,"nodeType":"645","messageId":"646","endLine":1,"endColumn":30},{"ruleId":"643","severity":1,"message":"697","line":11,"column":10,"nodeType":"645","messageId":"646","endLine":11,"endColumn":24},{"ruleId":"643","severity":1,"message":"705","line":24,"column":11,"nodeType":"645","messageId":"646","endLine":24,"endColumn":18},{"ruleId":"643","severity":1,"message":"649","line":18,"column":20,"nodeType":"645","messageId":"646","endLine":18,"endColumn":29},{"ruleId":"643","severity":1,"message":"650","line":19,"column":19,"nodeType":"645","messageId":"646","endLine":19,"endColumn":27},{"ruleId":"651","severity":1,"message":"663","line":55,"column":8,"nodeType":"653","endLine":55,"endColumn":14,"suggestions":"706"},{"ruleId":"639","replacedBy":"707"},{"ruleId":"641","replacedBy":"708"},{"ruleId":"643","severity":1,"message":"673","line":17,"column":9,"nodeType":"645","messageId":"646","endLine":17,"endColumn":15},{"ruleId":"643","severity":1,"message":"709","line":42,"column":9,"nodeType":"645","messageId":"646","endLine":42,"endColumn":21},{"ruleId":"643","severity":1,"message":"710","line":157,"column":13,"nodeType":"645","messageId":"646","endLine":157,"endColumn":17},{"ruleId":"685","severity":1,"message":"686","line":164,"column":38,"nodeType":"687","messageId":"688","endLine":164,"endColumn":40},{"ruleId":"651","severity":1,"message":"663","line":65,"column":8,"nodeType":"653","endLine":65,"endColumn":18,"suggestions":"711"},{"ruleId":"643","severity":1,"message":"712","line":3,"column":8,"nodeType":"645","messageId":"646","endLine":3,"endColumn":14},{"ruleId":"643","severity":1,"message":"713","line":17,"column":9,"nodeType":"645","messageId":"646","endLine":17,"endColumn":25},{"ruleId":"643","severity":1,"message":"714","line":12,"column":18,"nodeType":"645","messageId":"646","endLine":12,"endColumn":25},{"ruleId":"643","severity":1,"message":"649","line":13,"column":20,"nodeType":"645","messageId":"646","endLine":13,"endColumn":29},{"ruleId":"643","severity":1,"message":"650","line":14,"column":19,"nodeType":"645","messageId":"646","endLine":14,"endColumn":27},{"ruleId":"651","severity":1,"message":"663","line":54,"column":8,"nodeType":"653","endLine":54,"endColumn":14,"suggestions":"715"},{"ruleId":"639","replacedBy":"716"},{"ruleId":"641","replacedBy":"717"},{"ruleId":"643","severity":1,"message":"673","line":14,"column":9,"nodeType":"645","messageId":"646","endLine":14,"endColumn":15},{"ruleId":"643","severity":1,"message":"718","line":13,"column":8,"nodeType":"645","messageId":"646","endLine":13,"endColumn":14},{"ruleId":"643","severity":1,"message":"719","line":18,"column":12,"nodeType":"645","messageId":"646","endLine":18,"endColumn":21},{"ruleId":"643","severity":1,"message":"720","line":18,"column":23,"nodeType":"645","messageId":"646","endLine":18,"endColumn":35},{"ruleId":"643","severity":1,"message":"721","line":4,"column":8,"nodeType":"645","messageId":"646","endLine":4,"endColumn":17},{"ruleId":"643","severity":1,"message":"722","line":5,"column":8,"nodeType":"645","messageId":"646","endLine":5,"endColumn":11},{"ruleId":"643","severity":1,"message":"723","line":6,"column":8,"nodeType":"645","messageId":"646","endLine":6,"endColumn":11},{"ruleId":"643","severity":1,"message":"724","line":4,"column":8,"nodeType":"645","messageId":"646","endLine":4,"endColumn":14},{"ruleId":"639","replacedBy":"725"},{"ruleId":"641","replacedBy":"726"},{"ruleId":"643","severity":1,"message":"727","line":1,"column":35,"nodeType":"645","messageId":"646","endLine":1,"endColumn":43},{"ruleId":"651","severity":1,"message":"663","line":54,"column":8,"nodeType":"653","endLine":54,"endColumn":15,"suggestions":"728"},{"ruleId":"651","severity":1,"message":"665","line":64,"column":7,"nodeType":"653","endLine":64,"endColumn":17,"suggestions":"729"},{"ruleId":"643","severity":1,"message":"730","line":8,"column":5,"nodeType":"645","messageId":"646","endLine":8,"endColumn":12},{"ruleId":"643","severity":1,"message":"731","line":9,"column":5,"nodeType":"645","messageId":"646","endLine":9,"endColumn":18},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"673","line":15,"column":9,"nodeType":"645","messageId":"646","endLine":15,"endColumn":15},{"ruleId":"643","severity":1,"message":"732","line":21,"column":9,"nodeType":"645","messageId":"646","endLine":21,"endColumn":14},{"ruleId":"643","severity":1,"message":"733","line":22,"column":9,"nodeType":"645","messageId":"646","endLine":22,"endColumn":15},{"ruleId":"643","severity":1,"message":"734","line":23,"column":9,"nodeType":"645","messageId":"646","endLine":23,"endColumn":14},{"ruleId":"643","severity":1,"message":"735","line":24,"column":9,"nodeType":"645","messageId":"646","endLine":24,"endColumn":14},{"ruleId":"643","severity":1,"message":"736","line":16,"column":10,"nodeType":"645","messageId":"646","endLine":16,"endColumn":16},{"ruleId":"643","severity":1,"message":"737","line":1,"column":10,"nodeType":"645","messageId":"646","endLine":1,"endColumn":17},{"ruleId":"643","severity":1,"message":"738","line":175,"column":7,"nodeType":"645","messageId":"646","endLine":175,"endColumn":21},{"ruleId":"643","severity":1,"message":"674","line":14,"column":11,"nodeType":"645","messageId":"646","endLine":14,"endColumn":19},{"ruleId":"651","severity":1,"message":"663","line":65,"column":8,"nodeType":"653","endLine":65,"endColumn":14,"suggestions":"739"},{"ruleId":"643","severity":1,"message":"740","line":2,"column":9,"nodeType":"645","messageId":"646","endLine":2,"endColumn":20},{"ruleId":"643","severity":1,"message":"741","line":4,"column":9,"nodeType":"645","messageId":"646","endLine":4,"endColumn":21},{"ruleId":"643","severity":1,"message":"742","line":6,"column":9,"nodeType":"645","messageId":"646","endLine":6,"endColumn":17},{"ruleId":"643","severity":1,"message":"743","line":17,"column":12,"nodeType":"645","messageId":"646","endLine":17,"endColumn":16},{"ruleId":"643","severity":1,"message":"744","line":17,"column":18,"nodeType":"645","messageId":"646","endLine":17,"endColumn":24},{"ruleId":"643","severity":1,"message":"745","line":17,"column":26,"nodeType":"645","messageId":"646","endLine":17,"endColumn":34},{"ruleId":"643","severity":1,"message":"746","line":17,"column":36,"nodeType":"645","messageId":"646","endLine":17,"endColumn":41},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"747","line":27,"column":9,"nodeType":"645","messageId":"646","endLine":27,"endColumn":23},{"ruleId":"643","severity":1,"message":"748","line":124,"column":13,"nodeType":"645","messageId":"646","endLine":124,"endColumn":20},{"ruleId":"643","severity":1,"message":"749","line":90,"column":11,"nodeType":"645","messageId":"646","endLine":90,"endColumn":19},{"ruleId":"643","severity":1,"message":"750","line":112,"column":11,"nodeType":"645","messageId":"646","endLine":112,"endColumn":18},{"ruleId":"751","severity":1,"message":"752","line":169,"column":33,"nodeType":"753","messageId":"754","endLine":169,"endColumn":35},{"ruleId":"755","severity":1,"message":"756","line":171,"column":17,"nodeType":"757","messageId":"758","endLine":194,"endColumn":18},{"ruleId":"643","severity":1,"message":"649","line":15,"column":20,"nodeType":"645","messageId":"646","endLine":15,"endColumn":29},{"ruleId":"643","severity":1,"message":"650","line":16,"column":19,"nodeType":"645","messageId":"646","endLine":16,"endColumn":27},{"ruleId":"643","severity":1,"message":"732","line":20,"column":12,"nodeType":"645","messageId":"646","endLine":20,"endColumn":17},{"ruleId":"643","severity":1,"message":"759","line":20,"column":19,"nodeType":"645","messageId":"646","endLine":20,"endColumn":27},{"ruleId":"643","severity":1,"message":"760","line":28,"column":12,"nodeType":"645","messageId":"646","endLine":28,"endColumn":21},{"ruleId":"643","severity":1,"message":"761","line":28,"column":23,"nodeType":"645","messageId":"646","endLine":28,"endColumn":35},{"ruleId":"643","severity":1,"message":"762","line":69,"column":11,"nodeType":"645","messageId":"646","endLine":69,"endColumn":20},{"ruleId":"651","severity":1,"message":"652","line":93,"column":8,"nodeType":"653","endLine":93,"endColumn":14,"suggestions":"763"},{"ruleId":"643","severity":1,"message":"764","line":96,"column":9,"nodeType":"645","messageId":"646","endLine":96,"endColumn":21},{"ruleId":"651","severity":1,"message":"652","line":109,"column":8,"nodeType":"653","endLine":109,"endColumn":14,"suggestions":"765"},{"ruleId":"643","severity":1,"message":"766","line":12,"column":9,"nodeType":"645","messageId":"646","endLine":12,"endColumn":13},{"ruleId":"643","severity":1,"message":"767","line":13,"column":9,"nodeType":"645","messageId":"646","endLine":13,"endColumn":23},{"ruleId":"643","severity":1,"message":"768","line":14,"column":9,"nodeType":"645","messageId":"646","endLine":14,"endColumn":16},{"ruleId":"643","severity":1,"message":"673","line":20,"column":9,"nodeType":"645","messageId":"646","endLine":20,"endColumn":15},{"ruleId":"643","severity":1,"message":"769","line":34,"column":13,"nodeType":"645","messageId":"646","endLine":34,"endColumn":23},{"ruleId":"643","severity":1,"message":"770","line":26,"column":5,"nodeType":"645","messageId":"646","endLine":26,"endColumn":11},{"ruleId":"651","severity":1,"message":"665","line":94,"column":8,"nodeType":"653","endLine":94,"endColumn":18,"suggestions":"771"},{"ruleId":"651","severity":1,"message":"663","line":112,"column":8,"nodeType":"653","endLine":112,"endColumn":14,"suggestions":"772"},{"ruleId":"643","severity":1,"message":"657","line":3,"column":5,"nodeType":"645","messageId":"646","endLine":3,"endColumn":11},{"ruleId":"643","severity":1,"message":"773","line":11,"column":5,"nodeType":"645","messageId":"646","endLine":11,"endColumn":12},{"ruleId":"643","severity":1,"message":"774","line":45,"column":15,"nodeType":"645","messageId":"646","endLine":45,"endColumn":38},{"ruleId":"643","severity":1,"message":"775","line":85,"column":15,"nodeType":"645","messageId":"646","endLine":85,"endColumn":38},{"ruleId":"643","severity":1,"message":"776","line":87,"column":13,"nodeType":"645","messageId":"646","endLine":87,"endColumn":21},{"ruleId":"643","severity":1,"message":"777","line":134,"column":15,"nodeType":"645","messageId":"646","endLine":134,"endColumn":37},{"ruleId":"643","severity":1,"message":"778","line":144,"column":15,"nodeType":"645","messageId":"646","endLine":144,"endColumn":31},{"ruleId":"643","severity":1,"message":"779","line":1,"column":10,"nodeType":"645","messageId":"646","endLine":1,"endColumn":21},{"ruleId":"643","severity":1,"message":"780","line":25,"column":7,"nodeType":"645","messageId":"646","endLine":25,"endColumn":22},{"ruleId":"643","severity":1,"message":"781","line":104,"column":7,"nodeType":"645","messageId":"646","endLine":104,"endColumn":14},"no-native-reassign",["782"],"no-negated-in-lhs",["783"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'RotatingArrow' is defined but never used.","'interpolateCividis' is defined but never used.","'setHeight' is assigned a value but never used.","'setWidth' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initVis'. Either include it or remove the dependency array.","ArrayExpression",["784"],["782"],["783"],"'select' is defined but never used.","'min' is defined but never used.","'max' is defined but never used.","'extent' is defined but never used.","'scaleLinear' is defined but never used.","'name' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'initVis' and 'updateVis'. Either include them or remove the dependency array.",["785"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["786"],"'X_ANGLE' is assigned a value but never used.","'Y_ANGLE' is assigned a value but never used.","'X_RADIUS' is assigned a value but never used.","'Y_RADIUS' is assigned a value but never used.","'X_SPEED' is assigned a value but never used.","'Y_SPEED' is assigned a value but never used.","'margin' is assigned a value but never used.","'dispatch' is assigned a value but never used.",["787"],"'arrow' is assigned a value but never used.","'Testi' is defined but never used.",["782"],["783"],"'Tupu' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Vector' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'dispatch', 'initVis', and 'updateVis'. Either include them or remove the dependency array.",["788"],["789"],"'kaannaVasen' is defined but never used.","'kaannaOikea' is defined but never used.","'liikuta' is defined but never used.",["790"],["791"],"'getRandomColor' is defined but never used.","'accelerate' is defined but never used.","React Hook useEffect has a missing dependency: 'element'. Either include it or remove the dependency array.",["792"],"'b' is assigned a value but never used.",["793"],["794"],"'gravitationReducer' is defined but never used.","'padding' is assigned a value but never used.",["795"],["782"],["783"],"'transitionMs' is assigned a value but never used.","'arcs' is assigned a value but never used.",["796"],"'styled' is defined but never used.","'handleStepChange' is assigned a value but never used.","'setData' is assigned a value but never used.",["797"],["782"],["783"],"'Toggle' is defined but never used.","'isToggled' is assigned a value but never used.","'setIsToggled' is assigned a value but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'SunFun' is defined but never used.",["782"],["783"],"'useState' is defined but never used.",["798"],["799"],"'animate' is defined but never used.","'stopAnimation' is defined but never used.","'count' is assigned a value but never used.","'offset' is defined but never used.","'speed' is assigned a value but never used.","'angle' is assigned a value but never used.","'format' is defined but never used.","'compose' is defined but never used.","'drawRectangleL' is assigned a value but never used.",["800"],"'useDispatch' is defined but never used.","'IoMdSettings' is defined but never used.","'VscDebug' is defined but never used.","'data' is assigned a value but never used.","'height' is assigned a value but never used.","'isActive' is assigned a value but never used.","'width' is assigned a value but never used.","'updateLineType' is defined but never used.","'fooElem' is assigned a value but never used.","'setAlpha' is assigned a value but never used.","'setBeta' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'setCount' is assigned a value but never used.","'intervaId' is assigned a value but never used.","'setIntervaId' is assigned a value but never used.","'updateVis' is assigned a value but never used.",["801"],"'handleChange' is assigned a value but never used.",["802"],"'defs' is defined but never used.","'linearGradient' is defined but never used.","'stopTwo' is defined but never used.","'drawCircle' is assigned a value but never used.","'active' is assigned a value but never used.",["803"],["804"],"'circles' is defined but never used.","'displayPerceptionCircle' is assigned a value but never used.","'displayOriginalVelocity' is assigned a value but never used.","'velocity' is assigned a value but never used.","'updatePerceptionCircle' is assigned a value but never used.","'updateVelocities' is assigned a value but never used.","'randomBates' is defined but never used.","'NUMBER_OF_BOIDS' is assigned a value but never used.","'getData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"805","fix":"806"},{"desc":"807","fix":"808"},{"desc":"809","fix":"810"},{"desc":"807","fix":"811"},{"desc":"812","fix":"813"},{"desc":"809","fix":"814"},{"desc":"807","fix":"815"},{"desc":"809","fix":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},{"desc":"809","fix":"821"},{"desc":"807","fix":"822"},{"desc":"823","fix":"824"},{"desc":"807","fix":"825"},{"desc":"826","fix":"827"},{"desc":"809","fix":"828"},{"desc":"807","fix":"829"},{"desc":"805","fix":"830"},{"desc":"805","fix":"831"},{"desc":"809","fix":"832"},{"desc":"807","fix":"833"},"Update the dependencies array to be: [data, initVis]",{"range":"834","text":"835"},"Update the dependencies array to be: [data, initVis, updateVis]",{"range":"836","text":"837"},"Update the dependencies array to be: [dispatch, isActive]",{"range":"838","text":"839"},{"range":"840","text":"837"},"Update the dependencies array to be: [data, dispatch, initVis, updateVis]",{"range":"841","text":"842"},{"range":"843","text":"839"},{"range":"844","text":"837"},{"range":"845","text":"839"},"Update the dependencies array to be: [element, eventName]",{"range":"846","text":"847"},"Update the dependencies array to be: [data, initVis, preview, updateVis]",{"range":"848","text":"849"},{"range":"850","text":"839"},{"range":"851","text":"837"},"Update the dependencies array to be: [initVis, rotation, updateVis]",{"range":"852","text":"853"},{"range":"854","text":"837"},"Update the dependencies array to be: [datum, initVis, updateVis]",{"range":"855","text":"856"},{"range":"857","text":"839"},{"range":"858","text":"837"},{"range":"859","text":"835"},{"range":"860","text":"835"},{"range":"861","text":"839"},{"range":"862","text":"837"},[1146,1152],"[data, initVis]",[1116,1122],"[data, initVis, updateVis]",[1190,1200],"[dispatch, isActive]",[1079,1085],[2397,2403],"[data, dispatch, initVis, updateVis]",[2553,2563],[2732,2738],[2806,2816],[985,996],"[element, eventName]",[1555,1570],"[data, initVis, preview, updateVis]",[1959,1969],[1063,1069],[1245,1255],"[initVis, rotation, updateVis]",[1086,1092],[1028,1035],"[datum, initVis, updateVis]",[1153,1163],[1414,1420],[1896,1902],[2166,2172],[2128,2138],[2434,2440]]